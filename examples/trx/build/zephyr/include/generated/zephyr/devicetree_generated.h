/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   /home/novello/zephyr3.7B/R5x_No/autec-dir/samples/trx/build/zephyr/zephyr.dts.pre
 *
 * Directories with bindings:
 *   /home/novello/zephyr3.7B/R5x_No/autec-dir/dts/bindings, /home/novello/zephyr3.7B/R5x_No/autec-dir/boards/silabs/autecradio/dts/bindings, $ZEPHYR_BASE/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /bt_hci_silabs
 *   3   /chosen
 *   4   /soc
 *   5   /soc/interrupt-controller@e000e100
 *   6   /soc/gpio@5003c000
 *   7   /soc/gpio@5003c000/gpio@5003c030
 *   8   /gpio-wake-up
 *   9   /soc/gpio@5003c000/gpio@5003c090
 *   10  /gpio_switch_0
 *   11  /hwinfo
 *   12  /memory@20000000
 *   13  /soc/gpio@5003c000/gpio@5003c060
 *   14  /buttons
 *   15  /buttons/button_0
 *   16  /buttons/button_1
 *   17  /clocks
 *   18  /clocks/clk-hfxo
 *   19  /cpus
 *   20  /cpus/power-states
 *   21  /cpus/power-states/em1
 *   22  /cpus/power-states/em2
 *   23  /cpus/power-states/em3
 *   24  /cpus/cpu@0
 *   25  /leds
 *   26  /leds/led_0
 *   27  /leds/led_1
 *   28  /pin-controller
 *   29  /pin-controller/usart0_default
 *   30  /pin-controller/usart0_default/group1
 *   31  /soc/adc@59004000
 *   32  /soc/burtc@50064000
 *   33  /soc/i2c@5b000000
 *   34  /soc/leuart@4006a000
 *   35  /soc/semailbox@5c021000
 *   36  /soc/stimer@500a8000
 *   37  /soc/timer@e000e010
 *   38  /soc/usart@5005c000
 *   39  /soc/wdog@5b004000
 *   40  /soc/wdog@5b008000
 *   41  /soc/flash-controller@50030000
 *   42  /soc/flash-controller@50030000/flash@0
 *   43  /soc/flash-controller@50030000/flash@0/partitions
 *   44  /soc/flash-controller@50030000/flash@0/partitions/partition@0
 *   45  /soc/flash-controller@50030000/flash@0/partitions/partition@c000
 *   46  /soc/flash-controller@50030000/flash@0/partitions/partition@80000
 *   47  /soc/flash-controller@50030000/flash@0/partitions/partition@f4000
 *   48  /soc/flash-controller@50030000/flash@0/partitions/partition@fc000
 *   49  /soc/gpio@5003c000/gpio@5003c0C0
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/* Used to remove brackets from around a single argument */
#define DT_DEBRACKET_INTERNAL(...) __VA_ARGS__

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"

/* Helpers for dealing with node labels: */
#define DT_N_NODELABEL_NUM 0
#define DT_N_FOREACH_NODELABEL(fn) 
#define DT_N_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_CHILD_NUM 13
#define DT_N_CHILD_NUM_STATUS_OKAY 11
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_clocks) fn(DT_N_S_cpus) fn(DT_N_S_memory_20000000) fn(DT_N_S_bt_hci_silabs) fn(DT_N_S_pin_controller) fn(DT_N_S_hwinfo) fn(DT_N_S_leds) fn(DT_N_S_buttons) fn(DT_N_S_gpio_wake_up) fn(DT_N_S_gpio_switch_0)
#define DT_N_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_clocks) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_20000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_bt_hci_silabs) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_hwinfo) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_wake_up) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_switch_0)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_clocks, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_memory_20000000, __VA_ARGS__) fn(DT_N_S_bt_hci_silabs, __VA_ARGS__) fn(DT_N_S_pin_controller, __VA_ARGS__) fn(DT_N_S_hwinfo, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_buttons, __VA_ARGS__) fn(DT_N_S_gpio_wake_up, __VA_ARGS__) fn(DT_N_S_gpio_switch_0, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_clocks, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_20000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_bt_hci_silabs, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_hwinfo, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_wake_up, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_switch_0, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_clocks) fn(DT_N_S_cpus) fn(DT_N_S_memory_20000000) fn(DT_N_S_pin_controller) fn(DT_N_S_leds) fn(DT_N_S_buttons) fn(DT_N_S_gpio_wake_up) fn(DT_N_S_gpio_switch_0)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_clocks) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_20000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_wake_up) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_switch_0)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_clocks, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_memory_20000000, __VA_ARGS__) fn(DT_N_S_pin_controller, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_buttons, __VA_ARGS__) fn(DT_N_S_gpio_wake_up, __VA_ARGS__) fn(DT_N_S_gpio_switch_0, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_clocks, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_20000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_wake_up, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_switch_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_ORD 0
#define DT_N_ORD_STR_SORTABLE 00000

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /bt_hci_silabs */ \
	3, /* /chosen */ \
	4, /* /soc */ \
	8, /* /gpio-wake-up */ \
	10, /* /gpio_switch_0 */ \
	11, /* /hwinfo */ \
	12, /* /memory@20000000 */ \
	14, /* /buttons */ \
	17, /* /clocks */ \
	19, /* /cpus */ \
	25, /* /leds */ \
	28, /* /pin-controller */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_silabs_autecradio DT_N
#define DT_N_INST_0_silabs_efr32zg23  DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_IRQ_LEVEL 0
#define DT_N_COMPAT_MATCHES_silabs_autecradio 1
#define DT_N_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_COMPAT_MODEL_IDX_0 "autecradio"
#define DT_N_COMPAT_MATCHES_silabs_efr32zg23 1
#define DT_N_COMPAT_VENDOR_IDX_1_EXISTS 1
#define DT_N_COMPAT_VENDOR_IDX_1 "Silicon Laboratories"
#define DT_N_COMPAT_MODEL_IDX_1_EXISTS 1
#define DT_N_COMPAT_MODEL_IDX_1 "efr32zg23"
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"silabs,autecradio", "silabs,efr32zg23"}
#define DT_N_P_compatible_IDX_0 "silabs,autecradio"
#define DT_N_P_compatible_IDX_0_STRING_UNQUOTED silabs,autecradio
#define DT_N_P_compatible_IDX_0_STRING_TOKEN silabs_autecradio
#define DT_N_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_AUTECRADIO
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_IDX_1 "silabs,efr32zg23"
#define DT_N_P_compatible_IDX_1_STRING_UNQUOTED silabs,efr32zg23
#define DT_N_P_compatible_IDX_1_STRING_TOKEN silabs_efr32zg23
#define DT_N_P_compatible_IDX_1_STRING_UPPER_TOKEN SILABS_EFR32ZG23
#define DT_N_P_compatible_IDX_1_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0) \
	fn(DT_N, compatible, 1)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N, compatible, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N, compatible, 1)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__) \
	fn(DT_N, compatible, 1, __VA_ARGS__)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N, compatible, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N, compatible, 1, __VA_ARGS__)
#define DT_N_P_compatible_LEN 2
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_aliases_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_aliases_NODELABEL_NUM 0
#define DT_N_S_aliases_FOREACH_NODELABEL(fn) 
#define DT_N_S_aliases_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_aliases_CHILD_NUM 0
#define DT_N_S_aliases_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1
#define DT_N_S_aliases_ORD_STR_SORTABLE 00001

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_RANGES_NUM 0
#define DT_N_S_aliases_FOREACH_RANGE(fn) 
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_IRQ_LEVEL 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /bt_hci_silabs
 *
 * Node identifier: DT_N_S_bt_hci_silabs
 *
 * Binding (compatible = silabs,bt-hci):
 *   $ZEPHYR_BASE/dts/bindings/bluetooth/silabs,bt-hci.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_bt_hci_silabs_PATH "/bt_hci_silabs"

/* Node's name with unit-address: */
#define DT_N_S_bt_hci_silabs_FULL_NAME "bt_hci_silabs"

/* Node parent (/) identifier: */
#define DT_N_S_bt_hci_silabs_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_bt_hci_silabs_CHILD_IDX 6

/* Helpers for dealing with node labels: */
#define DT_N_S_bt_hci_silabs_NODELABEL_NUM 1
#define DT_N_S_bt_hci_silabs_FOREACH_NODELABEL(fn) fn(bt_hci_silabs)
#define DT_N_S_bt_hci_silabs_FOREACH_NODELABEL_VARGS(fn, ...) fn(bt_hci_silabs, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_bt_hci_silabs_CHILD_NUM 0
#define DT_N_S_bt_hci_silabs_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_bt_hci_silabs_FOREACH_CHILD(fn) 
#define DT_N_S_bt_hci_silabs_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_bt_hci_silabs_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_bt_hci_silabs_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_bt_hci_silabs_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_bt_hci_silabs_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_bt_hci_silabs_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_bt_hci_silabs_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_bt_hci_silabs_ORD 2
#define DT_N_S_bt_hci_silabs_ORD_STR_SORTABLE 00002

/* Ordinals for what this node depends on directly: */
#define DT_N_S_bt_hci_silabs_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_bt_hci_silabs_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_bt_hci_silabs_EXISTS 1
#define DT_N_INST_0_silabs_bt_hci    DT_N_S_bt_hci_silabs
#define DT_N_NODELABEL_bt_hci_silabs DT_N_S_bt_hci_silabs

/* Macros for properties that are special in the specification: */
#define DT_N_S_bt_hci_silabs_REG_NUM 0
#define DT_N_S_bt_hci_silabs_RANGES_NUM 0
#define DT_N_S_bt_hci_silabs_FOREACH_RANGE(fn) 
#define DT_N_S_bt_hci_silabs_IRQ_NUM 0
#define DT_N_S_bt_hci_silabs_IRQ_LEVEL 0
#define DT_N_S_bt_hci_silabs_COMPAT_MATCHES_silabs_bt_hci 1
#define DT_N_S_bt_hci_silabs_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_bt_hci_silabs_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_bt_hci_silabs_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_bt_hci_silabs_COMPAT_MODEL_IDX_0 "bt-hci"
#define DT_N_S_bt_hci_silabs_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_bt_hci_silabs_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_bt_hci_silabs_P_wakeup_source 0
#define DT_N_S_bt_hci_silabs_P_wakeup_source_EXISTS 1
#define DT_N_S_bt_hci_silabs_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_bt_hci_silabs_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_bt_hci_silabs_P_status "disabled"
#define DT_N_S_bt_hci_silabs_P_status_STRING_UNQUOTED disabled
#define DT_N_S_bt_hci_silabs_P_status_STRING_TOKEN disabled
#define DT_N_S_bt_hci_silabs_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_bt_hci_silabs_P_status_IDX_0 "disabled"
#define DT_N_S_bt_hci_silabs_P_status_IDX_0_EXISTS 1
#define DT_N_S_bt_hci_silabs_P_status_ENUM_IDX 2
#define DT_N_S_bt_hci_silabs_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_bt_hci_silabs_P_status_ENUM_TOKEN disabled
#define DT_N_S_bt_hci_silabs_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_bt_hci_silabs_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_bt_hci_silabs, status, 0)
#define DT_N_S_bt_hci_silabs_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_bt_hci_silabs, status, 0)
#define DT_N_S_bt_hci_silabs_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_bt_hci_silabs, status, 0, __VA_ARGS__)
#define DT_N_S_bt_hci_silabs_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_bt_hci_silabs, status, 0, __VA_ARGS__)
#define DT_N_S_bt_hci_silabs_P_status_LEN 1
#define DT_N_S_bt_hci_silabs_P_status_EXISTS 1
#define DT_N_S_bt_hci_silabs_P_compatible {"silabs,bt-hci"}
#define DT_N_S_bt_hci_silabs_P_compatible_IDX_0 "silabs,bt-hci"
#define DT_N_S_bt_hci_silabs_P_compatible_IDX_0_STRING_UNQUOTED silabs,bt-hci
#define DT_N_S_bt_hci_silabs_P_compatible_IDX_0_STRING_TOKEN silabs_bt_hci
#define DT_N_S_bt_hci_silabs_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_BT_HCI
#define DT_N_S_bt_hci_silabs_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_bt_hci_silabs_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_bt_hci_silabs, compatible, 0)
#define DT_N_S_bt_hci_silabs_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_bt_hci_silabs, compatible, 0)
#define DT_N_S_bt_hci_silabs_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_bt_hci_silabs, compatible, 0, __VA_ARGS__)
#define DT_N_S_bt_hci_silabs_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_bt_hci_silabs, compatible, 0, __VA_ARGS__)
#define DT_N_S_bt_hci_silabs_P_compatible_LEN 1
#define DT_N_S_bt_hci_silabs_P_compatible_EXISTS 1
#define DT_N_S_bt_hci_silabs_P_zephyr_deferred_init 0
#define DT_N_S_bt_hci_silabs_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_bt_hci_silabs_P_bt_hci_name "sl:bt"
#define DT_N_S_bt_hci_silabs_P_bt_hci_name_STRING_UNQUOTED sl:bt
#define DT_N_S_bt_hci_silabs_P_bt_hci_name_STRING_TOKEN sl_bt
#define DT_N_S_bt_hci_silabs_P_bt_hci_name_STRING_UPPER_TOKEN SL_BT
#define DT_N_S_bt_hci_silabs_P_bt_hci_name_IDX_0 "sl:bt"
#define DT_N_S_bt_hci_silabs_P_bt_hci_name_IDX_0_EXISTS 1
#define DT_N_S_bt_hci_silabs_P_bt_hci_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_bt_hci_silabs, bt_hci_name, 0)
#define DT_N_S_bt_hci_silabs_P_bt_hci_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_bt_hci_silabs, bt_hci_name, 0)
#define DT_N_S_bt_hci_silabs_P_bt_hci_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_bt_hci_silabs, bt_hci_name, 0, __VA_ARGS__)
#define DT_N_S_bt_hci_silabs_P_bt_hci_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_bt_hci_silabs, bt_hci_name, 0, __VA_ARGS__)
#define DT_N_S_bt_hci_silabs_P_bt_hci_name_LEN 1
#define DT_N_S_bt_hci_silabs_P_bt_hci_name_EXISTS 1
#define DT_N_S_bt_hci_silabs_P_bt_hci_bus "BT_HCI_BUS_VIRTUAL"
#define DT_N_S_bt_hci_silabs_P_bt_hci_bus_STRING_UNQUOTED BT_HCI_BUS_VIRTUAL
#define DT_N_S_bt_hci_silabs_P_bt_hci_bus_STRING_TOKEN BT_HCI_BUS_VIRTUAL
#define DT_N_S_bt_hci_silabs_P_bt_hci_bus_STRING_UPPER_TOKEN BT_HCI_BUS_VIRTUAL
#define DT_N_S_bt_hci_silabs_P_bt_hci_bus_IDX_0 "BT_HCI_BUS_VIRTUAL"
#define DT_N_S_bt_hci_silabs_P_bt_hci_bus_IDX_0_EXISTS 1
#define DT_N_S_bt_hci_silabs_P_bt_hci_bus_ENUM_IDX 0
#define DT_N_S_bt_hci_silabs_P_bt_hci_bus_ENUM_VAL_BT_HCI_BUS_VIRTUAL_EXISTS 1
#define DT_N_S_bt_hci_silabs_P_bt_hci_bus_ENUM_TOKEN BT_HCI_BUS_VIRTUAL
#define DT_N_S_bt_hci_silabs_P_bt_hci_bus_ENUM_UPPER_TOKEN BT_HCI_BUS_VIRTUAL
#define DT_N_S_bt_hci_silabs_P_bt_hci_bus_FOREACH_PROP_ELEM(fn) fn(DT_N_S_bt_hci_silabs, bt_hci_bus, 0)
#define DT_N_S_bt_hci_silabs_P_bt_hci_bus_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_bt_hci_silabs, bt_hci_bus, 0)
#define DT_N_S_bt_hci_silabs_P_bt_hci_bus_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_bt_hci_silabs, bt_hci_bus, 0, __VA_ARGS__)
#define DT_N_S_bt_hci_silabs_P_bt_hci_bus_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_bt_hci_silabs, bt_hci_bus, 0, __VA_ARGS__)
#define DT_N_S_bt_hci_silabs_P_bt_hci_bus_LEN 1
#define DT_N_S_bt_hci_silabs_P_bt_hci_bus_EXISTS 1
#define DT_N_S_bt_hci_silabs_P_bt_hci_quirks {"BT_HCI_QUIRK_NO_RESET"}
#define DT_N_S_bt_hci_silabs_P_bt_hci_quirks_IDX_0 "BT_HCI_QUIRK_NO_RESET"
#define DT_N_S_bt_hci_silabs_P_bt_hci_quirks_IDX_0_STRING_UNQUOTED BT_HCI_QUIRK_NO_RESET
#define DT_N_S_bt_hci_silabs_P_bt_hci_quirks_IDX_0_STRING_TOKEN BT_HCI_QUIRK_NO_RESET
#define DT_N_S_bt_hci_silabs_P_bt_hci_quirks_IDX_0_STRING_UPPER_TOKEN BT_HCI_QUIRK_NO_RESET
#define DT_N_S_bt_hci_silabs_P_bt_hci_quirks_IDX_0_EXISTS 1
#define DT_N_S_bt_hci_silabs_P_bt_hci_quirks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_bt_hci_silabs, bt_hci_quirks, 0)
#define DT_N_S_bt_hci_silabs_P_bt_hci_quirks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_bt_hci_silabs, bt_hci_quirks, 0)
#define DT_N_S_bt_hci_silabs_P_bt_hci_quirks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_bt_hci_silabs, bt_hci_quirks, 0, __VA_ARGS__)
#define DT_N_S_bt_hci_silabs_P_bt_hci_quirks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_bt_hci_silabs, bt_hci_quirks, 0, __VA_ARGS__)
#define DT_N_S_bt_hci_silabs_P_bt_hci_quirks_LEN 1
#define DT_N_S_bt_hci_silabs_P_bt_hci_quirks_EXISTS 1
#define DT_N_S_bt_hci_silabs_P_bt_hci_vs_ext 0
#define DT_N_S_bt_hci_silabs_P_bt_hci_vs_ext_EXISTS 1

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_chosen_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_chosen_NODELABEL_NUM 0
#define DT_N_S_chosen_FOREACH_NODELABEL(fn) 
#define DT_N_S_chosen_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_chosen_CHILD_NUM 0
#define DT_N_S_chosen_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 3
#define DT_N_S_chosen_ORD_STR_SORTABLE 00003

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_IRQ_LEVEL 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_NODELABEL_NUM 0
#define DT_N_S_soc_FOREACH_NODELABEL(fn) 
#define DT_N_S_soc_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_CHILD_NUM 13
#define DT_N_S_soc_CHILD_NUM_STATUS_OKAY 7
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_flash_controller_50030000) fn(DT_N_S_soc_S_leuart_4006a000) fn(DT_N_S_soc_S_usart_5005c000) fn(DT_N_S_soc_S_burtc_50064000) fn(DT_N_S_soc_S_semailbox_5c021000) fn(DT_N_S_soc_S_i2c_5b000000) fn(DT_N_S_soc_S_stimer_500a8000) fn(DT_N_S_soc_S_gpio_5003c000) fn(DT_N_S_soc_S_wdog_5b004000) fn(DT_N_S_soc_S_wdog_5b008000) fn(DT_N_S_soc_S_adc_59004000)
#define DT_N_S_soc_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_e000e100) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e000e010) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_leuart_4006a000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_usart_5005c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_burtc_50064000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_semailbox_5c021000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_5b000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_stimer_500a8000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_5003c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_wdog_5b004000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_wdog_5b008000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_59004000)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000, __VA_ARGS__) fn(DT_N_S_soc_S_leuart_4006a000, __VA_ARGS__) fn(DT_N_S_soc_S_usart_5005c000, __VA_ARGS__) fn(DT_N_S_soc_S_burtc_50064000, __VA_ARGS__) fn(DT_N_S_soc_S_semailbox_5c021000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_5b000000, __VA_ARGS__) fn(DT_N_S_soc_S_stimer_500a8000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000, __VA_ARGS__) fn(DT_N_S_soc_S_wdog_5b004000, __VA_ARGS__) fn(DT_N_S_soc_S_wdog_5b008000, __VA_ARGS__) fn(DT_N_S_soc_S_adc_59004000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_leuart_4006a000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_usart_5005c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_burtc_50064000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_semailbox_5c021000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_5b000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_stimer_500a8000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_5003c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_wdog_5b004000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_wdog_5b008000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_59004000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_flash_controller_50030000) fn(DT_N_S_soc_S_usart_5005c000) fn(DT_N_S_soc_S_semailbox_5c021000) fn(DT_N_S_soc_S_gpio_5003c000) fn(DT_N_S_soc_S_wdog_5b004000)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_e000e100) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e000e010) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_usart_5005c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_semailbox_5c021000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_5003c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_wdog_5b004000)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000, __VA_ARGS__) fn(DT_N_S_soc_S_usart_5005c000, __VA_ARGS__) fn(DT_N_S_soc_S_semailbox_5c021000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000, __VA_ARGS__) fn(DT_N_S_soc_S_wdog_5b004000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_usart_5005c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_semailbox_5c021000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_5003c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_wdog_5b004000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 4
#define DT_N_S_soc_ORD_STR_SORTABLE 00004

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	5, /* /soc/interrupt-controller@e000e100 */ \
	6, /* /soc/gpio@5003c000 */ \
	31, /* /soc/adc@59004000 */ \
	32, /* /soc/burtc@50064000 */ \
	33, /* /soc/i2c@5b000000 */ \
	34, /* /soc/leuart@4006a000 */ \
	35, /* /soc/semailbox@5c021000 */ \
	36, /* /soc/stimer@500a8000 */ \
	37, /* /soc/timer@e000e010 */ \
	38, /* /soc/usart@5005c000 */ \
	39, /* /soc/wdog@5b004000 */ \
	40, /* /soc/wdog@5b008000 */ \
	41, /* /soc/flash-controller@50030000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_silabs_efr32fz23b020f512gm48 DT_N_S_soc
#define DT_N_INST_1_silabs_efr32zg23             DT_N_S_soc
#define DT_N_INST_0_silabs_efr32                 DT_N_S_soc
#define DT_N_INST_0_simple_bus                   DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_RANGES_NUM 0
#define DT_N_S_soc_FOREACH_RANGE(fn) 
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_IRQ_LEVEL 0
#define DT_N_S_soc_COMPAT_MATCHES_silabs_efr32fz23b020f512gm48 1
#define DT_N_S_soc_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_soc_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_COMPAT_MODEL_IDX_0 "efr32fz23b020f512gm48"
#define DT_N_S_soc_COMPAT_MATCHES_silabs_efr32zg23 1
#define DT_N_S_soc_COMPAT_VENDOR_IDX_1_EXISTS 1
#define DT_N_S_soc_COMPAT_VENDOR_IDX_1 "Silicon Laboratories"
#define DT_N_S_soc_COMPAT_MODEL_IDX_1_EXISTS 1
#define DT_N_S_soc_COMPAT_MODEL_IDX_1 "efr32zg23"
#define DT_N_S_soc_COMPAT_MATCHES_silabs_efr32 1
#define DT_N_S_soc_COMPAT_VENDOR_IDX_2_EXISTS 1
#define DT_N_S_soc_COMPAT_VENDOR_IDX_2 "Silicon Laboratories"
#define DT_N_S_soc_COMPAT_MODEL_IDX_2_EXISTS 1
#define DT_N_S_soc_COMPAT_MODEL_IDX_2 "efr32"
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"silabs,efr32fz23b020f512gm48", "silabs,efr32zg23", "silabs,efr32", "simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0 "silabs,efr32fz23b020f512gm48"
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UNQUOTED silabs,efr32fz23b020f512gm48
#define DT_N_S_soc_P_compatible_IDX_0_STRING_TOKEN silabs_efr32fz23b020f512gm48
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_EFR32FZ23B020F512GM48
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_IDX_1 "silabs,efr32zg23"
#define DT_N_S_soc_P_compatible_IDX_1_STRING_UNQUOTED silabs,efr32zg23
#define DT_N_S_soc_P_compatible_IDX_1_STRING_TOKEN silabs_efr32zg23
#define DT_N_S_soc_P_compatible_IDX_1_STRING_UPPER_TOKEN SILABS_EFR32ZG23
#define DT_N_S_soc_P_compatible_IDX_1_EXISTS 1
#define DT_N_S_soc_P_compatible_IDX_2 "silabs,efr32"
#define DT_N_S_soc_P_compatible_IDX_2_STRING_UNQUOTED silabs,efr32
#define DT_N_S_soc_P_compatible_IDX_2_STRING_TOKEN silabs_efr32
#define DT_N_S_soc_P_compatible_IDX_2_STRING_UPPER_TOKEN SILABS_EFR32
#define DT_N_S_soc_P_compatible_IDX_2_EXISTS 1
#define DT_N_S_soc_P_compatible_IDX_3 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_3_STRING_UNQUOTED simple-bus
#define DT_N_S_soc_P_compatible_IDX_3_STRING_TOKEN simple_bus
#define DT_N_S_soc_P_compatible_IDX_3_STRING_UPPER_TOKEN SIMPLE_BUS
#define DT_N_S_soc_P_compatible_IDX_3_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0) \
	fn(DT_N_S_soc, compatible, 1) \
	fn(DT_N_S_soc, compatible, 2) \
	fn(DT_N_S_soc, compatible, 3)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc, compatible, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc, compatible, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc, compatible, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc, compatible, 3)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__) \
	fn(DT_N_S_soc, compatible, 1, __VA_ARGS__) \
	fn(DT_N_S_soc, compatible, 2, __VA_ARGS__) \
	fn(DT_N_S_soc, compatible, 3, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc, compatible, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc, compatible, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc, compatible, 3, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 4
#define DT_N_S_soc_P_compatible_EXISTS 1
#define DT_N_S_soc_P_ranges_EXISTS 1

/*
 * Devicetree node: /soc/interrupt-controller@e000e100
 *
 * Node identifier: DT_N_S_soc_S_interrupt_controller_e000e100
 *
 * Binding (compatible = arm,v8m-nvic):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/arm,v8m-nvic.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PATH "/soc/interrupt-controller@e000e100"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_FULL_NAME "interrupt-controller@e000e100"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_NODELABEL_NUM 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_NODELABEL(fn) fn(nvic)
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_NODELABEL_VARGS(fn, ...) fn(nvic, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_interrupt_controller_e000e100_CHILD_NUM 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_ORD 5
#define DT_N_S_soc_S_interrupt_controller_e000e100_ORD_STR_SORTABLE 00005

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REQUIRES_ORDS \
	4, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_SUPPORTS_ORDS \
	6, /* /soc/gpio@5003c000 */ \
	31, /* /soc/adc@59004000 */ \
	32, /* /soc/burtc@50064000 */ \
	33, /* /soc/i2c@5b000000 */ \
	34, /* /soc/leuart@4006a000 */ \
	35, /* /soc/semailbox@5c021000 */ \
	36, /* /soc/stimer@500a8000 */ \
	38, /* /soc/usart@5005c000 */ \
	39, /* /soc/wdog@5b004000 */ \
	40, /* /soc/wdog@5b008000 */ \
	41, /* /soc/flash-controller@50030000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_EXISTS 1
#define DT_N_INST_0_arm_v8m_nvic DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_NODELABEL_nvic      DT_N_S_soc_S_interrupt_controller_e000e100

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_NUM 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_VAL_ADDRESS 3758153984 /* 0xe000e100 */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_VAL_SIZE 3072 /* 0xc00 */
#define DT_N_S_soc_S_interrupt_controller_e000e100_RANGES_NUM 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_IRQ_NUM 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_IRQ_LEVEL 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MATCHES_arm_v8m_nvic 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MODEL_IDX_0 "v8m-nvic"
#define DT_N_S_soc_S_interrupt_controller_e000e100_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_interrupt_controller 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_interrupt_controller_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_wakeup_source 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible {"arm,v8m-nvic"}
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0 "arm,v8m-nvic"
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_STRING_UNQUOTED arm,v8m-nvic
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_STRING_TOKEN arm_v8m_nvic
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_V8M_NVIC
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_LEN 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg {3758153984 /* 0xe000e100 */, 3072 /* 0xc00 */}
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_0 3758153984
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_1 3072
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_arm_num_irq_priority_bits 4
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_arm_num_irq_priority_bits_EXISTS 1

/*
 * Devicetree node: /soc/gpio@5003c000
 *
 * Node identifier: DT_N_S_soc_S_gpio_5003c000
 *
 * Binding (compatible = silabs,gecko-gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/silabs,gecko-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_5003c000_PATH "/soc/gpio@5003c000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_5003c000_FULL_NAME "gpio@5003c000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_5003c000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_5003c000_CHILD_IDX 9

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_gpio_5003c000_NODELABEL_NUM 1
#define DT_N_S_soc_S_gpio_5003c000_FOREACH_NODELABEL(fn) fn(gpio)
#define DT_N_S_soc_S_gpio_5003c000_FOREACH_NODELABEL_VARGS(fn, ...) fn(gpio, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_5003c000_CHILD_NUM 4
#define DT_N_S_soc_S_gpio_5003c000_CHILD_NUM_STATUS_OKAY 4
#define DT_N_S_soc_S_gpio_5003c000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0)
#define DT_N_S_soc_S_gpio_5003c000_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0)
#define DT_N_S_soc_S_gpio_5003c000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0)
#define DT_N_S_soc_S_gpio_5003c000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0)
#define DT_N_S_soc_S_gpio_5003c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_5003c000_ORD 6
#define DT_N_S_soc_S_gpio_5003c000_ORD_STR_SORTABLE 00006

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_5003c000_REQUIRES_ORDS \
	4, /* /soc */ \
	5, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_5003c000_SUPPORTS_ORDS \
	7, /* /soc/gpio@5003c000/gpio@5003c030 */ \
	9, /* /soc/gpio@5003c000/gpio@5003c090 */ \
	13, /* /soc/gpio@5003c000/gpio@5003c060 */ \
	49, /* /soc/gpio@5003c000/gpio@5003c0C0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_5003c000_EXISTS 1
#define DT_N_INST_0_silabs_gecko_gpio DT_N_S_soc_S_gpio_5003c000
#define DT_N_NODELABEL_gpio           DT_N_S_soc_S_gpio_5003c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_5003c000_REG_NUM 1
#define DT_N_S_soc_S_gpio_5003c000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_REG_IDX_0_VAL_ADDRESS 1342423040 /* 0x5003c000 */
#define DT_N_S_soc_S_gpio_5003c000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_gpio_5003c000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_5003c000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_5003c000_IRQ_NUM 2
#define DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_0_VAL_irq 27
#define DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_0_VAL_priority 2
#define DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_1_VAL_irq 26
#define DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_1_VAL_priority 2
#define DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_1_CONTROLLER DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_S_soc_S_gpio_5003c000_IRQ_LEVEL 1
#define DT_N_S_soc_S_gpio_5003c000_IRQ_NAME_gpio_even_VAL_irq DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_gpio_5003c000_IRQ_NAME_gpio_even_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_IRQ_NAME_gpio_even_VAL_priority DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_gpio_5003c000_IRQ_NAME_gpio_even_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_IRQ_NAME_gpio_even_CONTROLLER DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_0_CONTROLLER
#define DT_N_S_soc_S_gpio_5003c000_IRQ_NAME_gpio_odd_VAL_irq DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_1_VAL_irq
#define DT_N_S_soc_S_gpio_5003c000_IRQ_NAME_gpio_odd_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_IRQ_NAME_gpio_odd_VAL_priority DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_1_VAL_priority
#define DT_N_S_soc_S_gpio_5003c000_IRQ_NAME_gpio_odd_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_IRQ_NAME_gpio_odd_CONTROLLER DT_N_S_soc_S_gpio_5003c000_IRQ_IDX_1_CONTROLLER
#define DT_N_S_soc_S_gpio_5003c000_COMPAT_MATCHES_silabs_gecko_gpio 1
#define DT_N_S_soc_S_gpio_5003c000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_soc_S_gpio_5003c000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_COMPAT_MODEL_IDX_0 "gecko-gpio"
#define DT_N_S_soc_S_gpio_5003c000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_5003c000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_5003c000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_5003c000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_gpio_5003c000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_status "okay"
#define DT_N_S_soc_S_gpio_5003c000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_gpio_5003c000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_5003c000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_5003c000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_gpio_5003c000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_5003c000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_5003c000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_5003c000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_5003c000, status, 0)
#define DT_N_S_soc_S_gpio_5003c000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_5003c000, status, 0)
#define DT_N_S_soc_S_gpio_5003c000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_5003c000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_5003c000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_P_status_LEN 1
#define DT_N_S_soc_S_gpio_5003c000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_compatible {"silabs,gecko-gpio"}
#define DT_N_S_soc_S_gpio_5003c000_P_compatible_IDX_0 "silabs,gecko-gpio"
#define DT_N_S_soc_S_gpio_5003c000_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-gpio
#define DT_N_S_soc_S_gpio_5003c000_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_gpio
#define DT_N_S_soc_S_gpio_5003c000_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_GPIO
#define DT_N_S_soc_S_gpio_5003c000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_5003c000, compatible, 0)
#define DT_N_S_soc_S_gpio_5003c000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_5003c000, compatible, 0)
#define DT_N_S_soc_S_gpio_5003c000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_5003c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_5003c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_5003c000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_reg {1342423040 /* 0x5003c000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_gpio_5003c000_P_reg_IDX_0 1342423040
#define DT_N_S_soc_S_gpio_5003c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_gpio_5003c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_interrupts {27 /* 0x1b */, 2 /* 0x2 */, 26 /* 0x1a */, 2 /* 0x2 */}
#define DT_N_S_soc_S_gpio_5003c000_P_interrupts_IDX_0 27
#define DT_N_S_soc_S_gpio_5003c000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_interrupts_IDX_1 2
#define DT_N_S_soc_S_gpio_5003c000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_interrupts_IDX_2 26
#define DT_N_S_soc_S_gpio_5003c000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_interrupts_IDX_3 2
#define DT_N_S_soc_S_gpio_5003c000_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_interrupt_names {"GPIO_EVEN", "GPIO_ODD"}
#define DT_N_S_soc_S_gpio_5003c000_P_interrupt_names_IDX_0 "GPIO_EVEN"
#define DT_N_S_soc_S_gpio_5003c000_P_interrupt_names_IDX_0_STRING_UNQUOTED GPIO_EVEN
#define DT_N_S_soc_S_gpio_5003c000_P_interrupt_names_IDX_0_STRING_TOKEN GPIO_EVEN
#define DT_N_S_soc_S_gpio_5003c000_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN GPIO_EVEN
#define DT_N_S_soc_S_gpio_5003c000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_interrupt_names_IDX_1 "GPIO_ODD"
#define DT_N_S_soc_S_gpio_5003c000_P_interrupt_names_IDX_1_STRING_UNQUOTED GPIO_ODD
#define DT_N_S_soc_S_gpio_5003c000_P_interrupt_names_IDX_1_STRING_TOKEN GPIO_ODD
#define DT_N_S_soc_S_gpio_5003c000_P_interrupt_names_IDX_1_STRING_UPPER_TOKEN GPIO_ODD
#define DT_N_S_soc_S_gpio_5003c000_P_interrupt_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_5003c000, interrupt_names, 0) \
	fn(DT_N_S_soc_S_gpio_5003c000, interrupt_names, 1)
#define DT_N_S_soc_S_gpio_5003c000_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_5003c000, interrupt_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_5003c000, interrupt_names, 1)
#define DT_N_S_soc_S_gpio_5003c000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_5003c000, interrupt_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_5003c000, interrupt_names, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_5003c000, interrupt_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_5003c000, interrupt_names, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_P_interrupt_names_LEN 2
#define DT_N_S_soc_S_gpio_5003c000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_gpio_5003c000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_P_location_swo 0
#define DT_N_S_soc_S_gpio_5003c000_P_location_swo_EXISTS 1

/*
 * Devicetree node: /soc/gpio@5003c000/gpio@5003c030
 *
 * Node identifier: DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030
 *
 * Binding (compatible = silabs,gecko-gpio-port):
 *   $ZEPHYR_BASE/dts/bindings/gpio/silabs,gecko-gpio-port.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_PATH "/soc/gpio@5003c000/gpio@5003c030"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_FULL_NAME "gpio@5003c030"

/* Node parent (/soc/gpio@5003c000) identifier: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_PARENT DT_N_S_soc_S_gpio_5003c000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_NODELABEL_NUM 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_FOREACH_NODELABEL(fn) fn(gpioa)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_FOREACH_NODELABEL_VARGS(fn, ...) fn(gpioa, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_CHILD_NUM 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_ORD 7
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_ORD_STR_SORTABLE 00007

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_REQUIRES_ORDS \
	6, /* /soc/gpio@5003c000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_SUPPORTS_ORDS \
	8, /* /gpio-wake-up */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_EXISTS 1
#define DT_N_INST_0_silabs_gecko_gpio_port DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030
#define DT_N_NODELABEL_gpioa               DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_REG_NUM 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_REG_IDX_0_VAL_ADDRESS 1342423088 /* 0x5003c030 */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_REG_IDX_0_VAL_SIZE 48 /* 0x30 */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_IRQ_NUM 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_IRQ_LEVEL 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_COMPAT_MATCHES_silabs_gecko_gpio_port 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_COMPAT_MODEL_IDX_0 "gecko-gpio-port"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_ngpios 32
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_status "okay"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030, status, 0)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030, status, 0)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_status_LEN 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_compatible {"silabs,gecko-gpio-port"}
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_compatible_IDX_0 "silabs,gecko-gpio-port"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-gpio-port
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_gpio_port
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_GPIO_PORT
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030, compatible, 0)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030, compatible, 0)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_reg {1342423088 /* 0x5003c030 */, 48 /* 0x30 */}
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_reg_IDX_0 1342423088
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_reg_IDX_1 48
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_peripheral_id 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030_P_peripheral_id_EXISTS 1

/*
 * Devicetree node: /gpio-wake-up
 *
 * Node identifier: DT_N_S_gpio_wake_up
 *
 * Binding (compatible = silabs,gecko-wake-up-trigger):
 *   /home/novello/zephyr3.7B/R5x_No/autec-dir/boards/silabs/autecradio/dts/bindings/silabs,gecko-wake-up-trigger.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_gpio_wake_up_PATH "/gpio-wake-up"

/* Node's name with unit-address: */
#define DT_N_S_gpio_wake_up_FULL_NAME "gpio-wake-up"

/* Node parent (/) identifier: */
#define DT_N_S_gpio_wake_up_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_gpio_wake_up_CHILD_IDX 11

/* Helpers for dealing with node labels: */
#define DT_N_S_gpio_wake_up_NODELABEL_NUM 1
#define DT_N_S_gpio_wake_up_FOREACH_NODELABEL(fn) fn(wake_up_trigger)
#define DT_N_S_gpio_wake_up_FOREACH_NODELABEL_VARGS(fn, ...) fn(wake_up_trigger, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_gpio_wake_up_CHILD_NUM 0
#define DT_N_S_gpio_wake_up_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_gpio_wake_up_FOREACH_CHILD(fn) 
#define DT_N_S_gpio_wake_up_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_gpio_wake_up_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_gpio_wake_up_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_gpio_wake_up_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_gpio_wake_up_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_gpio_wake_up_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_gpio_wake_up_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_gpio_wake_up_ORD 8
#define DT_N_S_gpio_wake_up_ORD_STR_SORTABLE 00008

/* Ordinals for what this node depends on directly: */
#define DT_N_S_gpio_wake_up_REQUIRES_ORDS \
	0, /* / */ \
	7, /* /soc/gpio@5003c000/gpio@5003c030 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_gpio_wake_up_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_gpio_wake_up_EXISTS 1
#define DT_N_INST_0_silabs_gecko_wake_up_trigger DT_N_S_gpio_wake_up
#define DT_N_NODELABEL_wake_up_trigger           DT_N_S_gpio_wake_up

/* Macros for properties that are special in the specification: */
#define DT_N_S_gpio_wake_up_REG_NUM 0
#define DT_N_S_gpio_wake_up_RANGES_NUM 0
#define DT_N_S_gpio_wake_up_FOREACH_RANGE(fn) 
#define DT_N_S_gpio_wake_up_IRQ_NUM 0
#define DT_N_S_gpio_wake_up_IRQ_LEVEL 0
#define DT_N_S_gpio_wake_up_COMPAT_MATCHES_silabs_gecko_wake_up_trigger 1
#define DT_N_S_gpio_wake_up_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_gpio_wake_up_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_gpio_wake_up_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_gpio_wake_up_COMPAT_MODEL_IDX_0 "gecko-wake-up-trigger"
#define DT_N_S_gpio_wake_up_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_gpio_wake_up_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_gpio_wake_up_P_wakeup_source 0
#define DT_N_S_gpio_wake_up_P_wakeup_source_EXISTS 1
#define DT_N_S_gpio_wake_up_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_gpio_wake_up_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_gpio_wake_up_P_compatible {"silabs,gecko-wake-up-trigger"}
#define DT_N_S_gpio_wake_up_P_compatible_IDX_0 "silabs,gecko-wake-up-trigger"
#define DT_N_S_gpio_wake_up_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-wake-up-trigger
#define DT_N_S_gpio_wake_up_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_wake_up_trigger
#define DT_N_S_gpio_wake_up_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_WAKE_UP_TRIGGER
#define DT_N_S_gpio_wake_up_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_gpio_wake_up_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_wake_up, compatible, 0)
#define DT_N_S_gpio_wake_up_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_wake_up, compatible, 0)
#define DT_N_S_gpio_wake_up_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_wake_up, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_wake_up_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_wake_up, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_wake_up_P_compatible_LEN 1
#define DT_N_S_gpio_wake_up_P_compatible_EXISTS 1
#define DT_N_S_gpio_wake_up_P_zephyr_deferred_init 0
#define DT_N_S_gpio_wake_up_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_gpio_wake_up_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_gpio_wake_up_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030
#define DT_N_S_gpio_wake_up_P_gpios_IDX_0_VAL_pin 5
#define DT_N_S_gpio_wake_up_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_gpio_wake_up_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_gpio_wake_up_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_gpio_wake_up_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_wake_up, gpios, 0)
#define DT_N_S_gpio_wake_up_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_wake_up, gpios, 0)
#define DT_N_S_gpio_wake_up_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_wake_up, gpios, 0, __VA_ARGS__)
#define DT_N_S_gpio_wake_up_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_wake_up, gpios, 0, __VA_ARGS__)
#define DT_N_S_gpio_wake_up_P_gpios_LEN 1
#define DT_N_S_gpio_wake_up_P_gpios_EXISTS 1

/*
 * Devicetree node: /soc/gpio@5003c000/gpio@5003c090
 *
 * Node identifier: DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090
 *
 * Binding (compatible = silabs,gecko-gpio-port):
 *   $ZEPHYR_BASE/dts/bindings/gpio/silabs,gecko-gpio-port.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_PATH "/soc/gpio@5003c000/gpio@5003c090"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_FULL_NAME "gpio@5003c090"

/* Node parent (/soc/gpio@5003c000) identifier: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_PARENT DT_N_S_soc_S_gpio_5003c000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_NODELABEL_NUM 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_FOREACH_NODELABEL(fn) fn(gpioc)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_FOREACH_NODELABEL_VARGS(fn, ...) fn(gpioc, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_CHILD_NUM 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_ORD 9
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_ORD_STR_SORTABLE 00009

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_REQUIRES_ORDS \
	6, /* /soc/gpio@5003c000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_SUPPORTS_ORDS \
	10, /* /gpio_switch_0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_EXISTS 1
#define DT_N_INST_2_silabs_gecko_gpio_port DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090
#define DT_N_NODELABEL_gpioc               DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_REG_NUM 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_REG_IDX_0_VAL_ADDRESS 1342423184 /* 0x5003c090 */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_REG_IDX_0_VAL_SIZE 48 /* 0x30 */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_IRQ_NUM 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_IRQ_LEVEL 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_COMPAT_MATCHES_silabs_gecko_gpio_port 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_COMPAT_MODEL_IDX_0 "gecko-gpio-port"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_ngpios 32
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_status "okay"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090, status, 0)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090, status, 0)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_status_LEN 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_compatible {"silabs,gecko-gpio-port"}
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_compatible_IDX_0 "silabs,gecko-gpio-port"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-gpio-port
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_gpio_port
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_GPIO_PORT
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090, compatible, 0)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090, compatible, 0)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_reg {1342423184 /* 0x5003c090 */, 48 /* 0x30 */}
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_reg_IDX_0 1342423184
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_reg_IDX_1 48
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_peripheral_id 2
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090_P_peripheral_id_EXISTS 1

/*
 * Devicetree node: /gpio_switch_0
 *
 * Node identifier: DT_N_S_gpio_switch_0
 *
 * Binding (compatible = regulator-fixed):
 *   $ZEPHYR_BASE/dts/bindings/regulator/regulator-fixed.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_gpio_switch_0_PATH "/gpio_switch_0"

/* Node's name with unit-address: */
#define DT_N_S_gpio_switch_0_FULL_NAME "gpio_switch_0"

/* Node parent (/) identifier: */
#define DT_N_S_gpio_switch_0_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_gpio_switch_0_CHILD_IDX 12

/* Helpers for dealing with node labels: */
#define DT_N_S_gpio_switch_0_NODELABEL_NUM 1
#define DT_N_S_gpio_switch_0_FOREACH_NODELABEL(fn) fn(sensor_enable)
#define DT_N_S_gpio_switch_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(sensor_enable, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_gpio_switch_0_CHILD_NUM 0
#define DT_N_S_gpio_switch_0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_gpio_switch_0_FOREACH_CHILD(fn) 
#define DT_N_S_gpio_switch_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_gpio_switch_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_gpio_switch_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_gpio_switch_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_gpio_switch_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_gpio_switch_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_gpio_switch_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_gpio_switch_0_ORD 10
#define DT_N_S_gpio_switch_0_ORD_STR_SORTABLE 00010

/* Ordinals for what this node depends on directly: */
#define DT_N_S_gpio_switch_0_REQUIRES_ORDS \
	0, /* / */ \
	9, /* /soc/gpio@5003c000/gpio@5003c090 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_gpio_switch_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_gpio_switch_0_EXISTS 1
#define DT_N_INST_0_regulator_fixed  DT_N_S_gpio_switch_0
#define DT_N_NODELABEL_sensor_enable DT_N_S_gpio_switch_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_gpio_switch_0_REG_NUM 0
#define DT_N_S_gpio_switch_0_RANGES_NUM 0
#define DT_N_S_gpio_switch_0_FOREACH_RANGE(fn) 
#define DT_N_S_gpio_switch_0_IRQ_NUM 0
#define DT_N_S_gpio_switch_0_IRQ_LEVEL 0
#define DT_N_S_gpio_switch_0_COMPAT_MATCHES_regulator_fixed 1
#define DT_N_S_gpio_switch_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_gpio_switch_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_gpio_switch_0_P_wakeup_source 0
#define DT_N_S_gpio_switch_0_P_wakeup_source_EXISTS 1
#define DT_N_S_gpio_switch_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_gpio_switch_0_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_gpio_switch_0_P_compatible {"regulator-fixed"}
#define DT_N_S_gpio_switch_0_P_compatible_IDX_0 "regulator-fixed"
#define DT_N_S_gpio_switch_0_P_compatible_IDX_0_STRING_UNQUOTED regulator-fixed
#define DT_N_S_gpio_switch_0_P_compatible_IDX_0_STRING_TOKEN regulator_fixed
#define DT_N_S_gpio_switch_0_P_compatible_IDX_0_STRING_UPPER_TOKEN REGULATOR_FIXED
#define DT_N_S_gpio_switch_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_gpio_switch_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_switch_0, compatible, 0)
#define DT_N_S_gpio_switch_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_switch_0, compatible, 0)
#define DT_N_S_gpio_switch_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_switch_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_switch_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_switch_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_switch_0_P_compatible_LEN 1
#define DT_N_S_gpio_switch_0_P_compatible_EXISTS 1
#define DT_N_S_gpio_switch_0_P_zephyr_deferred_init 0
#define DT_N_S_gpio_switch_0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_gpio_switch_0_P_regulator_name "sensor_enable"
#define DT_N_S_gpio_switch_0_P_regulator_name_STRING_UNQUOTED sensor_enable
#define DT_N_S_gpio_switch_0_P_regulator_name_STRING_TOKEN sensor_enable
#define DT_N_S_gpio_switch_0_P_regulator_name_STRING_UPPER_TOKEN SENSOR_ENABLE
#define DT_N_S_gpio_switch_0_P_regulator_name_IDX_0 "sensor_enable"
#define DT_N_S_gpio_switch_0_P_regulator_name_IDX_0_EXISTS 1
#define DT_N_S_gpio_switch_0_P_regulator_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_switch_0, regulator_name, 0)
#define DT_N_S_gpio_switch_0_P_regulator_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_switch_0, regulator_name, 0)
#define DT_N_S_gpio_switch_0_P_regulator_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_switch_0, regulator_name, 0, __VA_ARGS__)
#define DT_N_S_gpio_switch_0_P_regulator_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_switch_0, regulator_name, 0, __VA_ARGS__)
#define DT_N_S_gpio_switch_0_P_regulator_name_LEN 1
#define DT_N_S_gpio_switch_0_P_regulator_name_EXISTS 1
#define DT_N_S_gpio_switch_0_P_regulator_always_on 0
#define DT_N_S_gpio_switch_0_P_regulator_always_on_EXISTS 1
#define DT_N_S_gpio_switch_0_P_regulator_boot_on 1
#define DT_N_S_gpio_switch_0_P_regulator_boot_on_EXISTS 1
#define DT_N_S_gpio_switch_0_P_enable_gpios_IDX_0_EXISTS 1
#define DT_N_S_gpio_switch_0_P_enable_gpios_IDX_0_PH DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090
#define DT_N_S_gpio_switch_0_P_enable_gpios_IDX_0_VAL_pin 9
#define DT_N_S_gpio_switch_0_P_enable_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_gpio_switch_0_P_enable_gpios_IDX_0_VAL_flags 0
#define DT_N_S_gpio_switch_0_P_enable_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_gpio_switch_0_P_enable_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_switch_0, enable_gpios, 0)
#define DT_N_S_gpio_switch_0_P_enable_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_switch_0, enable_gpios, 0)
#define DT_N_S_gpio_switch_0_P_enable_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_switch_0, enable_gpios, 0, __VA_ARGS__)
#define DT_N_S_gpio_switch_0_P_enable_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_switch_0, enable_gpios, 0, __VA_ARGS__)
#define DT_N_S_gpio_switch_0_P_enable_gpios_LEN 1
#define DT_N_S_gpio_switch_0_P_enable_gpios_EXISTS 1

/*
 * Devicetree node: /hwinfo
 *
 * Node identifier: DT_N_S_hwinfo
 */

/* Node's full path: */
#define DT_N_S_hwinfo_PATH "/hwinfo"

/* Node's name with unit-address: */
#define DT_N_S_hwinfo_FULL_NAME "hwinfo"

/* Node parent (/) identifier: */
#define DT_N_S_hwinfo_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_hwinfo_CHILD_IDX 8

/* Helpers for dealing with node labels: */
#define DT_N_S_hwinfo_NODELABEL_NUM 1
#define DT_N_S_hwinfo_FOREACH_NODELABEL(fn) fn(hwinfo)
#define DT_N_S_hwinfo_FOREACH_NODELABEL_VARGS(fn, ...) fn(hwinfo, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_hwinfo_CHILD_NUM 0
#define DT_N_S_hwinfo_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_hwinfo_FOREACH_CHILD(fn) 
#define DT_N_S_hwinfo_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_hwinfo_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_hwinfo_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_hwinfo_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_hwinfo_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_hwinfo_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_hwinfo_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_hwinfo_ORD 11
#define DT_N_S_hwinfo_ORD_STR_SORTABLE 00011

/* Ordinals for what this node depends on directly: */
#define DT_N_S_hwinfo_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_hwinfo_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_hwinfo_EXISTS 1
#define DT_N_INST_0_silabs_gecko_hwinfo DT_N_S_hwinfo
#define DT_N_NODELABEL_hwinfo           DT_N_S_hwinfo

/* Macros for properties that are special in the specification: */
#define DT_N_S_hwinfo_REG_NUM 0
#define DT_N_S_hwinfo_RANGES_NUM 0
#define DT_N_S_hwinfo_FOREACH_RANGE(fn) 
#define DT_N_S_hwinfo_IRQ_NUM 0
#define DT_N_S_hwinfo_IRQ_LEVEL 0
#define DT_N_S_hwinfo_COMPAT_MATCHES_silabs_gecko_hwinfo 1
#define DT_N_S_hwinfo_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_hwinfo_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_hwinfo_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_hwinfo_COMPAT_MODEL_IDX_0 "gecko-hwinfo"
#define DT_N_S_hwinfo_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_hwinfo_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_hwinfo_P_compatible {"silabs,gecko-hwinfo"}
#define DT_N_S_hwinfo_P_compatible_IDX_0 "silabs,gecko-hwinfo"
#define DT_N_S_hwinfo_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-hwinfo
#define DT_N_S_hwinfo_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_hwinfo
#define DT_N_S_hwinfo_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_HWINFO
#define DT_N_S_hwinfo_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_hwinfo_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_hwinfo, compatible, 0)
#define DT_N_S_hwinfo_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_hwinfo, compatible, 0)
#define DT_N_S_hwinfo_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_hwinfo, compatible, 0, __VA_ARGS__)
#define DT_N_S_hwinfo_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_hwinfo, compatible, 0, __VA_ARGS__)
#define DT_N_S_hwinfo_P_compatible_LEN 1
#define DT_N_S_hwinfo_P_compatible_EXISTS 1
#define DT_N_S_hwinfo_P_status "disabled"
#define DT_N_S_hwinfo_P_status_STRING_UNQUOTED disabled
#define DT_N_S_hwinfo_P_status_STRING_TOKEN disabled
#define DT_N_S_hwinfo_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_hwinfo_P_status_IDX_0 "disabled"
#define DT_N_S_hwinfo_P_status_IDX_0_EXISTS 1
#define DT_N_S_hwinfo_P_status_ENUM_IDX 2
#define DT_N_S_hwinfo_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_hwinfo_P_status_ENUM_TOKEN disabled
#define DT_N_S_hwinfo_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_hwinfo_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_hwinfo, status, 0)
#define DT_N_S_hwinfo_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_hwinfo, status, 0)
#define DT_N_S_hwinfo_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_hwinfo, status, 0, __VA_ARGS__)
#define DT_N_S_hwinfo_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_hwinfo, status, 0, __VA_ARGS__)
#define DT_N_S_hwinfo_P_status_LEN 1
#define DT_N_S_hwinfo_P_status_EXISTS 1

/*
 * Devicetree node: /memory@20000000
 *
 * Node identifier: DT_N_S_memory_20000000
 *
 * Binding (compatible = mmio-sram):
 *   $ZEPHYR_BASE/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_memory_20000000_PATH "/memory@20000000"

/* Node's name with unit-address: */
#define DT_N_S_memory_20000000_FULL_NAME "memory@20000000"

/* Node parent (/) identifier: */
#define DT_N_S_memory_20000000_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_memory_20000000_CHILD_IDX 5

/* Helpers for dealing with node labels: */
#define DT_N_S_memory_20000000_NODELABEL_NUM 1
#define DT_N_S_memory_20000000_FOREACH_NODELABEL(fn) fn(sram0)
#define DT_N_S_memory_20000000_FOREACH_NODELABEL_VARGS(fn, ...) fn(sram0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_memory_20000000_CHILD_NUM 0
#define DT_N_S_memory_20000000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_memory_20000000_FOREACH_CHILD(fn) 
#define DT_N_S_memory_20000000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_memory_20000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_memory_20000000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_memory_20000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_memory_20000000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_memory_20000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_memory_20000000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_memory_20000000_ORD 12
#define DT_N_S_memory_20000000_ORD_STR_SORTABLE 00012

/* Ordinals for what this node depends on directly: */
#define DT_N_S_memory_20000000_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_memory_20000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_memory_20000000_EXISTS 1
#define DT_N_INST_0_mmio_sram DT_N_S_memory_20000000
#define DT_N_NODELABEL_sram0  DT_N_S_memory_20000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_memory_20000000_REG_NUM 1
#define DT_N_S_memory_20000000_REG_IDX_0_EXISTS 1
#define DT_N_S_memory_20000000_REG_IDX_0_VAL_ADDRESS 536870912 /* 0x20000000 */
#define DT_N_S_memory_20000000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_memory_20000000_RANGES_NUM 0
#define DT_N_S_memory_20000000_FOREACH_RANGE(fn) 
#define DT_N_S_memory_20000000_IRQ_NUM 0
#define DT_N_S_memory_20000000_IRQ_LEVEL 0
#define DT_N_S_memory_20000000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_memory_20000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_memory_20000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_memory_20000000_P_wakeup_source 0
#define DT_N_S_memory_20000000_P_wakeup_source_EXISTS 1
#define DT_N_S_memory_20000000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_memory_20000000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_memory_20000000_P_compatible {"mmio-sram"}
#define DT_N_S_memory_20000000_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_memory_20000000_P_compatible_IDX_0_STRING_UNQUOTED mmio-sram
#define DT_N_S_memory_20000000_P_compatible_IDX_0_STRING_TOKEN mmio_sram
#define DT_N_S_memory_20000000_P_compatible_IDX_0_STRING_UPPER_TOKEN MMIO_SRAM
#define DT_N_S_memory_20000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_memory_20000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_20000000, compatible, 0)
#define DT_N_S_memory_20000000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_memory_20000000, compatible, 0)
#define DT_N_S_memory_20000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_20000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_memory_20000000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_memory_20000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_memory_20000000_P_compatible_LEN 1
#define DT_N_S_memory_20000000_P_compatible_EXISTS 1
#define DT_N_S_memory_20000000_P_reg {536870912 /* 0x20000000 */, 65536 /* 0x10000 */}
#define DT_N_S_memory_20000000_P_reg_IDX_0 536870912
#define DT_N_S_memory_20000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_memory_20000000_P_reg_IDX_1 65536
#define DT_N_S_memory_20000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_memory_20000000_P_reg_EXISTS 1
#define DT_N_S_memory_20000000_P_zephyr_deferred_init 0
#define DT_N_S_memory_20000000_P_zephyr_deferred_init_EXISTS 1

/*
 * Devicetree node: /soc/gpio@5003c000/gpio@5003c060
 *
 * Node identifier: DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060
 *
 * Binding (compatible = silabs,gecko-gpio-port):
 *   $ZEPHYR_BASE/dts/bindings/gpio/silabs,gecko-gpio-port.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_PATH "/soc/gpio@5003c000/gpio@5003c060"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_FULL_NAME "gpio@5003c060"

/* Node parent (/soc/gpio@5003c000) identifier: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_PARENT DT_N_S_soc_S_gpio_5003c000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_NODELABEL_NUM 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_FOREACH_NODELABEL(fn) fn(gpiob)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_FOREACH_NODELABEL_VARGS(fn, ...) fn(gpiob, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_CHILD_NUM 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_ORD 13
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_ORD_STR_SORTABLE 00013

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_REQUIRES_ORDS \
	6, /* /soc/gpio@5003c000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_SUPPORTS_ORDS \
	14, /* /buttons */ \
	15, /* /buttons/button_0 */ \
	16, /* /buttons/button_1 */ \
	25, /* /leds */ \
	26, /* /leds/led_0 */ \
	27, /* /leds/led_1 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_EXISTS 1
#define DT_N_INST_1_silabs_gecko_gpio_port DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060
#define DT_N_NODELABEL_gpiob               DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_REG_NUM 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_REG_IDX_0_VAL_ADDRESS 1342423136 /* 0x5003c060 */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_REG_IDX_0_VAL_SIZE 48 /* 0x30 */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_IRQ_NUM 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_IRQ_LEVEL 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_COMPAT_MATCHES_silabs_gecko_gpio_port 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_COMPAT_MODEL_IDX_0 "gecko-gpio-port"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_ngpios 32
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_status "okay"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060, status, 0)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060, status, 0)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_status_LEN 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_compatible {"silabs,gecko-gpio-port"}
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_compatible_IDX_0 "silabs,gecko-gpio-port"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-gpio-port
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_gpio_port
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_GPIO_PORT
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060, compatible, 0)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060, compatible, 0)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_reg {1342423136 /* 0x5003c060 */, 48 /* 0x30 */}
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_reg_IDX_0 1342423136
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_reg_IDX_1 48
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_peripheral_id 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060_P_peripheral_id_EXISTS 1

/*
 * Devicetree node: /buttons
 *
 * Node identifier: DT_N_S_buttons
 *
 * Binding (compatible = gpio-keys):
 *   $ZEPHYR_BASE/dts/bindings/input/gpio-keys.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_buttons_PATH "/buttons"

/* Node's name with unit-address: */
#define DT_N_S_buttons_FULL_NAME "buttons"

/* Node parent (/) identifier: */
#define DT_N_S_buttons_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_buttons_CHILD_IDX 10

/* Helpers for dealing with node labels: */
#define DT_N_S_buttons_NODELABEL_NUM 0
#define DT_N_S_buttons_FOREACH_NODELABEL(fn) 
#define DT_N_S_buttons_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_buttons_CHILD_NUM 2
#define DT_N_S_buttons_CHILD_NUM_STATUS_OKAY 2
#define DT_N_S_buttons_FOREACH_CHILD(fn) fn(DT_N_S_buttons_S_button_0) fn(DT_N_S_buttons_S_button_1)
#define DT_N_S_buttons_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_buttons_S_button_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons_S_button_1)
#define DT_N_S_buttons_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_buttons_S_button_0, __VA_ARGS__) fn(DT_N_S_buttons_S_button_1, __VA_ARGS__)
#define DT_N_S_buttons_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons_S_button_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons_S_button_1, __VA_ARGS__)
#define DT_N_S_buttons_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_buttons_S_button_0) fn(DT_N_S_buttons_S_button_1)
#define DT_N_S_buttons_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_buttons_S_button_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons_S_button_1)
#define DT_N_S_buttons_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_buttons_S_button_0, __VA_ARGS__) fn(DT_N_S_buttons_S_button_1, __VA_ARGS__)
#define DT_N_S_buttons_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons_S_button_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_buttons_S_button_1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_buttons_ORD 14
#define DT_N_S_buttons_ORD_STR_SORTABLE 00014

/* Ordinals for what this node depends on directly: */
#define DT_N_S_buttons_REQUIRES_ORDS \
	0, /* / */ \
	13, /* /soc/gpio@5003c000/gpio@5003c060 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_buttons_SUPPORTS_ORDS \
	15, /* /buttons/button_0 */ \
	16, /* /buttons/button_1 */

/* Existence and alternate IDs: */
#define DT_N_S_buttons_EXISTS 1
#define DT_N_INST_0_gpio_keys DT_N_S_buttons

/* Macros for properties that are special in the specification: */
#define DT_N_S_buttons_REG_NUM 0
#define DT_N_S_buttons_RANGES_NUM 0
#define DT_N_S_buttons_FOREACH_RANGE(fn) 
#define DT_N_S_buttons_IRQ_NUM 0
#define DT_N_S_buttons_IRQ_LEVEL 0
#define DT_N_S_buttons_COMPAT_MATCHES_gpio_keys 1
#define DT_N_S_buttons_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_buttons_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_buttons_P_wakeup_source 0
#define DT_N_S_buttons_P_wakeup_source_EXISTS 1
#define DT_N_S_buttons_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_buttons_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_buttons_P_compatible {"gpio-keys"}
#define DT_N_S_buttons_P_compatible_IDX_0 "gpio-keys"
#define DT_N_S_buttons_P_compatible_IDX_0_STRING_UNQUOTED gpio-keys
#define DT_N_S_buttons_P_compatible_IDX_0_STRING_TOKEN gpio_keys
#define DT_N_S_buttons_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_KEYS
#define DT_N_S_buttons_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_buttons_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_buttons, compatible, 0)
#define DT_N_S_buttons_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_buttons, compatible, 0)
#define DT_N_S_buttons_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_buttons, compatible, 0, __VA_ARGS__)
#define DT_N_S_buttons_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons, compatible, 0, __VA_ARGS__)
#define DT_N_S_buttons_P_compatible_LEN 1
#define DT_N_S_buttons_P_compatible_EXISTS 1
#define DT_N_S_buttons_P_zephyr_deferred_init 0
#define DT_N_S_buttons_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_buttons_P_debounce_interval_ms 30
#define DT_N_S_buttons_P_debounce_interval_ms_EXISTS 1
#define DT_N_S_buttons_P_polling_mode 0
#define DT_N_S_buttons_P_polling_mode_EXISTS 1

/*
 * Devicetree node: /buttons/button_0
 *
 * Node identifier: DT_N_S_buttons_S_button_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_buttons_S_button_0_PATH "/buttons/button_0"

/* Node's name with unit-address: */
#define DT_N_S_buttons_S_button_0_FULL_NAME "button_0"

/* Node parent (/buttons) identifier: */
#define DT_N_S_buttons_S_button_0_PARENT DT_N_S_buttons

/* Node's index in its parent's list of children: */
#define DT_N_S_buttons_S_button_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_buttons_S_button_0_NODELABEL_NUM 1
#define DT_N_S_buttons_S_button_0_FOREACH_NODELABEL(fn) fn(button0)
#define DT_N_S_buttons_S_button_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(button0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_buttons_S_button_0_CHILD_NUM 0
#define DT_N_S_buttons_S_button_0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD(fn) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_buttons_S_button_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_buttons_S_button_0_ORD 15
#define DT_N_S_buttons_S_button_0_ORD_STR_SORTABLE 00015

/* Ordinals for what this node depends on directly: */
#define DT_N_S_buttons_S_button_0_REQUIRES_ORDS \
	13, /* /soc/gpio@5003c000/gpio@5003c060 */ \
	14, /* /buttons */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_buttons_S_button_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_buttons_S_button_0_EXISTS 1
#define DT_N_ALIAS_sw0         DT_N_S_buttons_S_button_0
#define DT_N_NODELABEL_button0 DT_N_S_buttons_S_button_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_buttons_S_button_0_REG_NUM 0
#define DT_N_S_buttons_S_button_0_RANGES_NUM 0
#define DT_N_S_buttons_S_button_0_FOREACH_RANGE(fn) 
#define DT_N_S_buttons_S_button_0_IRQ_NUM 0
#define DT_N_S_buttons_S_button_0_IRQ_LEVEL 0
#define DT_N_S_buttons_S_button_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_buttons_S_button_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_VAL_pin 1
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_buttons_S_button_0_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_buttons_S_button_0_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_buttons_S_button_0, gpios, 0)
#define DT_N_S_buttons_S_button_0_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_buttons_S_button_0, gpios, 0)
#define DT_N_S_buttons_S_button_0_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_buttons_S_button_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_button_0_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons_S_button_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_button_0_P_gpios_LEN 1
#define DT_N_S_buttons_S_button_0_P_gpios_EXISTS 1
#define DT_N_S_buttons_S_button_0_P_label "User Push Button 0"
#define DT_N_S_buttons_S_button_0_P_label_STRING_UNQUOTED User Push Button 0
#define DT_N_S_buttons_S_button_0_P_label_STRING_TOKEN User_Push_Button_0
#define DT_N_S_buttons_S_button_0_P_label_STRING_UPPER_TOKEN USER_PUSH_BUTTON_0
#define DT_N_S_buttons_S_button_0_P_label_IDX_0 "User Push Button 0"
#define DT_N_S_buttons_S_button_0_P_label_IDX_0_EXISTS 1
#define DT_N_S_buttons_S_button_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_buttons_S_button_0, label, 0)
#define DT_N_S_buttons_S_button_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_buttons_S_button_0, label, 0)
#define DT_N_S_buttons_S_button_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_buttons_S_button_0, label, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_button_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons_S_button_0, label, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_button_0_P_label_LEN 1
#define DT_N_S_buttons_S_button_0_P_label_EXISTS 1
#define DT_N_S_buttons_S_button_0_P_zephyr_code 11
#define DT_N_S_buttons_S_button_0_P_zephyr_code_EXISTS 1

/*
 * Devicetree node: /buttons/button_1
 *
 * Node identifier: DT_N_S_buttons_S_button_1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_buttons_S_button_1_PATH "/buttons/button_1"

/* Node's name with unit-address: */
#define DT_N_S_buttons_S_button_1_FULL_NAME "button_1"

/* Node parent (/buttons) identifier: */
#define DT_N_S_buttons_S_button_1_PARENT DT_N_S_buttons

/* Node's index in its parent's list of children: */
#define DT_N_S_buttons_S_button_1_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_buttons_S_button_1_NODELABEL_NUM 1
#define DT_N_S_buttons_S_button_1_FOREACH_NODELABEL(fn) fn(button1)
#define DT_N_S_buttons_S_button_1_FOREACH_NODELABEL_VARGS(fn, ...) fn(button1, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_buttons_S_button_1_CHILD_NUM 0
#define DT_N_S_buttons_S_button_1_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_buttons_S_button_1_FOREACH_CHILD(fn) 
#define DT_N_S_buttons_S_button_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_buttons_S_button_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_buttons_S_button_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_buttons_S_button_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_buttons_S_button_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_buttons_S_button_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_buttons_S_button_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_buttons_S_button_1_ORD 16
#define DT_N_S_buttons_S_button_1_ORD_STR_SORTABLE 00016

/* Ordinals for what this node depends on directly: */
#define DT_N_S_buttons_S_button_1_REQUIRES_ORDS \
	13, /* /soc/gpio@5003c000/gpio@5003c060 */ \
	14, /* /buttons */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_buttons_S_button_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_buttons_S_button_1_EXISTS 1
#define DT_N_ALIAS_sw1         DT_N_S_buttons_S_button_1
#define DT_N_NODELABEL_button1 DT_N_S_buttons_S_button_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_buttons_S_button_1_REG_NUM 0
#define DT_N_S_buttons_S_button_1_RANGES_NUM 0
#define DT_N_S_buttons_S_button_1_FOREACH_RANGE(fn) 
#define DT_N_S_buttons_S_button_1_IRQ_NUM 0
#define DT_N_S_buttons_S_button_1_IRQ_LEVEL 0
#define DT_N_S_buttons_S_button_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_buttons_S_button_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_buttons_S_button_1_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_buttons_S_button_1_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060
#define DT_N_S_buttons_S_button_1_P_gpios_IDX_0_VAL_pin 3
#define DT_N_S_buttons_S_button_1_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_buttons_S_button_1_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_buttons_S_button_1_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_buttons_S_button_1_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_buttons_S_button_1, gpios, 0)
#define DT_N_S_buttons_S_button_1_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_buttons_S_button_1, gpios, 0)
#define DT_N_S_buttons_S_button_1_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_buttons_S_button_1, gpios, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_button_1_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons_S_button_1, gpios, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_button_1_P_gpios_LEN 1
#define DT_N_S_buttons_S_button_1_P_gpios_EXISTS 1
#define DT_N_S_buttons_S_button_1_P_label "User Push Button 1"
#define DT_N_S_buttons_S_button_1_P_label_STRING_UNQUOTED User Push Button 1
#define DT_N_S_buttons_S_button_1_P_label_STRING_TOKEN User_Push_Button_1
#define DT_N_S_buttons_S_button_1_P_label_STRING_UPPER_TOKEN USER_PUSH_BUTTON_1
#define DT_N_S_buttons_S_button_1_P_label_IDX_0 "User Push Button 1"
#define DT_N_S_buttons_S_button_1_P_label_IDX_0_EXISTS 1
#define DT_N_S_buttons_S_button_1_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_buttons_S_button_1, label, 0)
#define DT_N_S_buttons_S_button_1_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_buttons_S_button_1, label, 0)
#define DT_N_S_buttons_S_button_1_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_buttons_S_button_1, label, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_button_1_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_buttons_S_button_1, label, 0, __VA_ARGS__)
#define DT_N_S_buttons_S_button_1_P_label_LEN 1
#define DT_N_S_buttons_S_button_1_P_label_EXISTS 1
#define DT_N_S_buttons_S_button_1_P_zephyr_code 2
#define DT_N_S_buttons_S_button_1_P_zephyr_code_EXISTS 1

/*
 * Devicetree node: /clocks
 *
 * Node identifier: DT_N_S_clocks
 */

/* Node's full path: */
#define DT_N_S_clocks_PATH "/clocks"

/* Node's name with unit-address: */
#define DT_N_S_clocks_FULL_NAME "clocks"

/* Node parent (/) identifier: */
#define DT_N_S_clocks_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_clocks_CHILD_IDX 3

/* Helpers for dealing with node labels: */
#define DT_N_S_clocks_NODELABEL_NUM 0
#define DT_N_S_clocks_FOREACH_NODELABEL(fn) 
#define DT_N_S_clocks_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_clocks_CHILD_NUM 1
#define DT_N_S_clocks_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_clocks_FOREACH_CHILD(fn) fn(DT_N_S_clocks_S_clk_hfxo)
#define DT_N_S_clocks_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_clocks_S_clk_hfxo)
#define DT_N_S_clocks_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_clocks_S_clk_hfxo, __VA_ARGS__)
#define DT_N_S_clocks_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_clocks_S_clk_hfxo, __VA_ARGS__)
#define DT_N_S_clocks_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_clocks_S_clk_hfxo)
#define DT_N_S_clocks_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_clocks_S_clk_hfxo)
#define DT_N_S_clocks_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_clocks_S_clk_hfxo, __VA_ARGS__)
#define DT_N_S_clocks_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_clocks_S_clk_hfxo, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_clocks_ORD 17
#define DT_N_S_clocks_ORD_STR_SORTABLE 00017

/* Ordinals for what this node depends on directly: */
#define DT_N_S_clocks_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_clocks_SUPPORTS_ORDS \
	18, /* /clocks/clk-hfxo */

/* Existence and alternate IDs: */
#define DT_N_S_clocks_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_clocks_REG_NUM 0
#define DT_N_S_clocks_RANGES_NUM 0
#define DT_N_S_clocks_FOREACH_RANGE(fn) 
#define DT_N_S_clocks_IRQ_NUM 0
#define DT_N_S_clocks_IRQ_LEVEL 0
#define DT_N_S_clocks_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_clocks_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /clocks/clk-hfxo
 *
 * Node identifier: DT_N_S_clocks_S_clk_hfxo
 *
 * Binding (compatible = silabs,hfxo):
 *   $ZEPHYR_BASE/dts/bindings/clock/silabs,hfxo.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_clocks_S_clk_hfxo_PATH "/clocks/clk-hfxo"

/* Node's name with unit-address: */
#define DT_N_S_clocks_S_clk_hfxo_FULL_NAME "clk-hfxo"

/* Node parent (/clocks) identifier: */
#define DT_N_S_clocks_S_clk_hfxo_PARENT DT_N_S_clocks

/* Node's index in its parent's list of children: */
#define DT_N_S_clocks_S_clk_hfxo_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_clocks_S_clk_hfxo_NODELABEL_NUM 1
#define DT_N_S_clocks_S_clk_hfxo_FOREACH_NODELABEL(fn) fn(clk_hfxo)
#define DT_N_S_clocks_S_clk_hfxo_FOREACH_NODELABEL_VARGS(fn, ...) fn(clk_hfxo, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_clocks_S_clk_hfxo_CHILD_NUM 0
#define DT_N_S_clocks_S_clk_hfxo_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_clocks_S_clk_hfxo_FOREACH_CHILD(fn) 
#define DT_N_S_clocks_S_clk_hfxo_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_clocks_S_clk_hfxo_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_clocks_S_clk_hfxo_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_clocks_S_clk_hfxo_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_clocks_S_clk_hfxo_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_clocks_S_clk_hfxo_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_clocks_S_clk_hfxo_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_clocks_S_clk_hfxo_ORD 18
#define DT_N_S_clocks_S_clk_hfxo_ORD_STR_SORTABLE 00018

/* Ordinals for what this node depends on directly: */
#define DT_N_S_clocks_S_clk_hfxo_REQUIRES_ORDS \
	17, /* /clocks */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_clocks_S_clk_hfxo_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_clocks_S_clk_hfxo_EXISTS 1
#define DT_N_INST_0_silabs_hfxo DT_N_S_clocks_S_clk_hfxo
#define DT_N_NODELABEL_clk_hfxo DT_N_S_clocks_S_clk_hfxo

/* Macros for properties that are special in the specification: */
#define DT_N_S_clocks_S_clk_hfxo_REG_NUM 0
#define DT_N_S_clocks_S_clk_hfxo_RANGES_NUM 0
#define DT_N_S_clocks_S_clk_hfxo_FOREACH_RANGE(fn) 
#define DT_N_S_clocks_S_clk_hfxo_IRQ_NUM 0
#define DT_N_S_clocks_S_clk_hfxo_IRQ_LEVEL 0
#define DT_N_S_clocks_S_clk_hfxo_COMPAT_MATCHES_silabs_hfxo 1
#define DT_N_S_clocks_S_clk_hfxo_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_clocks_S_clk_hfxo_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_clocks_S_clk_hfxo_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_clocks_S_clk_hfxo_COMPAT_MODEL_IDX_0 "hfxo"
#define DT_N_S_clocks_S_clk_hfxo_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_clocks_S_clk_hfxo_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_clocks_S_clk_hfxo_P_clock_frequency 39000000
#define DT_N_S_clocks_S_clk_hfxo_P_clock_frequency_EXISTS 1
#define DT_N_S_clocks_S_clk_hfxo_P_ctune 140
#define DT_N_S_clocks_S_clk_hfxo_P_ctune_EXISTS 1
#define DT_N_S_clocks_S_clk_hfxo_P_precision 50
#define DT_N_S_clocks_S_clk_hfxo_P_precision_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_CHILD_IDX 4

/* Helpers for dealing with node labels: */
#define DT_N_S_cpus_NODELABEL_NUM 0
#define DT_N_S_cpus_FOREACH_NODELABEL(fn) 
#define DT_N_S_cpus_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_CHILD_NUM 2
#define DT_N_S_cpus_CHILD_NUM_STATUS_OKAY 2
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_power_states)
#define DT_N_S_cpus_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_power_states)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 19
#define DT_N_S_cpus_ORD_STR_SORTABLE 00019

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	20, /* /cpus/power-states */ \
	24, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_IRQ_LEVEL 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/power-states
 *
 * Node identifier: DT_N_S_cpus_S_power_states
 */

/* Node's full path: */
#define DT_N_S_cpus_S_power_states_PATH "/cpus/power-states"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_power_states_FULL_NAME "power-states"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_power_states_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_power_states_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_cpus_S_power_states_NODELABEL_NUM 0
#define DT_N_S_cpus_S_power_states_FOREACH_NODELABEL(fn) 
#define DT_N_S_cpus_S_power_states_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_power_states_CHILD_NUM 3
#define DT_N_S_cpus_S_power_states_CHILD_NUM_STATUS_OKAY 3
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_power_states_S_em1) fn(DT_N_S_cpus_S_power_states_S_em2) fn(DT_N_S_cpus_S_power_states_S_em3)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_power_states_S_em1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_em2) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_em3)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_power_states_S_em1, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_em2, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_em3, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_power_states_S_em1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_em2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_em3, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_power_states_S_em1) fn(DT_N_S_cpus_S_power_states_S_em2) fn(DT_N_S_cpus_S_power_states_S_em3)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_power_states_S_em1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_em2) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_em3)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_power_states_S_em1, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_em2, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_em3, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_power_states_S_em1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_em2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_em3, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_power_states_ORD 20
#define DT_N_S_cpus_S_power_states_ORD_STR_SORTABLE 00020

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_power_states_REQUIRES_ORDS \
	19, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_power_states_SUPPORTS_ORDS \
	21, /* /cpus/power-states/em1 */ \
	22, /* /cpus/power-states/em2 */ \
	23, /* /cpus/power-states/em3 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_power_states_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_power_states_REG_NUM 0
#define DT_N_S_cpus_S_power_states_RANGES_NUM 0
#define DT_N_S_cpus_S_power_states_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_power_states_IRQ_NUM 0
#define DT_N_S_cpus_S_power_states_IRQ_LEVEL 0
#define DT_N_S_cpus_S_power_states_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_power_states_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/power-states/em1
 *
 * Node identifier: DT_N_S_cpus_S_power_states_S_em1
 *
 * Binding (compatible = zephyr,power-state):
 *   $ZEPHYR_BASE/dts/bindings/power/zephyr,power-state.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_power_states_S_em1_PATH "/cpus/power-states/em1"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_power_states_S_em1_FULL_NAME "em1"

/* Node parent (/cpus/power-states) identifier: */
#define DT_N_S_cpus_S_power_states_S_em1_PARENT DT_N_S_cpus_S_power_states

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_power_states_S_em1_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_cpus_S_power_states_S_em1_NODELABEL_NUM 1
#define DT_N_S_cpus_S_power_states_S_em1_FOREACH_NODELABEL(fn) fn(pstate_em1)
#define DT_N_S_cpus_S_power_states_S_em1_FOREACH_NODELABEL_VARGS(fn, ...) fn(pstate_em1, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_power_states_S_em1_CHILD_NUM 0
#define DT_N_S_cpus_S_power_states_S_em1_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_cpus_S_power_states_S_em1_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_power_states_S_em1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_em1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_em1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_power_states_S_em1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_power_states_S_em1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_em1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_em1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_power_states_S_em1_ORD 21
#define DT_N_S_cpus_S_power_states_S_em1_ORD_STR_SORTABLE 00021

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_power_states_S_em1_REQUIRES_ORDS \
	20, /* /cpus/power-states */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_power_states_S_em1_SUPPORTS_ORDS \
	24, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_power_states_S_em1_EXISTS 1
#define DT_N_INST_0_zephyr_power_state DT_N_S_cpus_S_power_states_S_em1
#define DT_N_NODELABEL_pstate_em1      DT_N_S_cpus_S_power_states_S_em1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_power_states_S_em1_REG_NUM 0
#define DT_N_S_cpus_S_power_states_S_em1_RANGES_NUM 0
#define DT_N_S_cpus_S_power_states_S_em1_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_power_states_S_em1_IRQ_NUM 0
#define DT_N_S_cpus_S_power_states_S_em1_IRQ_LEVEL 0
#define DT_N_S_cpus_S_power_states_S_em1_COMPAT_MATCHES_zephyr_power_state 1
#define DT_N_S_cpus_S_power_states_S_em1_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em1_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_cpus_S_power_states_S_em1_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em1_COMPAT_MODEL_IDX_0 "power-state"
#define DT_N_S_cpus_S_power_states_S_em1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_power_states_S_em1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_power_states_S_em1_P_power_state_name "runtime-idle"
#define DT_N_S_cpus_S_power_states_S_em1_P_power_state_name_STRING_UNQUOTED runtime-idle
#define DT_N_S_cpus_S_power_states_S_em1_P_power_state_name_STRING_TOKEN runtime_idle
#define DT_N_S_cpus_S_power_states_S_em1_P_power_state_name_STRING_UPPER_TOKEN RUNTIME_IDLE
#define DT_N_S_cpus_S_power_states_S_em1_P_power_state_name_IDX_0 "runtime-idle"
#define DT_N_S_cpus_S_power_states_S_em1_P_power_state_name_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em1_P_power_state_name_ENUM_IDX 1
#define DT_N_S_cpus_S_power_states_S_em1_P_power_state_name_ENUM_VAL_runtime_idle_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em1_P_power_state_name_ENUM_TOKEN runtime_idle
#define DT_N_S_cpus_S_power_states_S_em1_P_power_state_name_ENUM_UPPER_TOKEN RUNTIME_IDLE
#define DT_N_S_cpus_S_power_states_S_em1_P_power_state_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_power_states_S_em1, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_em1_P_power_state_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_power_states_S_em1, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_em1_P_power_state_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_power_states_S_em1, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_em1_P_power_state_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_power_states_S_em1, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_em1_P_power_state_name_LEN 1
#define DT_N_S_cpus_S_power_states_S_em1_P_power_state_name_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em1_P_min_residency_us 4
#define DT_N_S_cpus_S_power_states_S_em1_P_min_residency_us_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em1_P_exit_latency_us 2
#define DT_N_S_cpus_S_power_states_S_em1_P_exit_latency_us_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em1_P_zephyr_pm_device_disabled 0
#define DT_N_S_cpus_S_power_states_S_em1_P_zephyr_pm_device_disabled_EXISTS 1

/*
 * Devicetree node: /cpus/power-states/em2
 *
 * Node identifier: DT_N_S_cpus_S_power_states_S_em2
 *
 * Binding (compatible = zephyr,power-state):
 *   $ZEPHYR_BASE/dts/bindings/power/zephyr,power-state.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_power_states_S_em2_PATH "/cpus/power-states/em2"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_power_states_S_em2_FULL_NAME "em2"

/* Node parent (/cpus/power-states) identifier: */
#define DT_N_S_cpus_S_power_states_S_em2_PARENT DT_N_S_cpus_S_power_states

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_power_states_S_em2_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_cpus_S_power_states_S_em2_NODELABEL_NUM 1
#define DT_N_S_cpus_S_power_states_S_em2_FOREACH_NODELABEL(fn) fn(pstate_em2)
#define DT_N_S_cpus_S_power_states_S_em2_FOREACH_NODELABEL_VARGS(fn, ...) fn(pstate_em2, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_power_states_S_em2_CHILD_NUM 0
#define DT_N_S_cpus_S_power_states_S_em2_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_cpus_S_power_states_S_em2_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_power_states_S_em2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_em2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_em2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_power_states_S_em2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_power_states_S_em2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_em2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_em2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_power_states_S_em2_ORD 22
#define DT_N_S_cpus_S_power_states_S_em2_ORD_STR_SORTABLE 00022

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_power_states_S_em2_REQUIRES_ORDS \
	20, /* /cpus/power-states */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_power_states_S_em2_SUPPORTS_ORDS \
	24, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_power_states_S_em2_EXISTS 1
#define DT_N_INST_1_zephyr_power_state DT_N_S_cpus_S_power_states_S_em2
#define DT_N_NODELABEL_pstate_em2      DT_N_S_cpus_S_power_states_S_em2

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_power_states_S_em2_REG_NUM 0
#define DT_N_S_cpus_S_power_states_S_em2_RANGES_NUM 0
#define DT_N_S_cpus_S_power_states_S_em2_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_power_states_S_em2_IRQ_NUM 0
#define DT_N_S_cpus_S_power_states_S_em2_IRQ_LEVEL 0
#define DT_N_S_cpus_S_power_states_S_em2_COMPAT_MATCHES_zephyr_power_state 1
#define DT_N_S_cpus_S_power_states_S_em2_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em2_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_cpus_S_power_states_S_em2_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em2_COMPAT_MODEL_IDX_0 "power-state"
#define DT_N_S_cpus_S_power_states_S_em2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_power_states_S_em2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_power_states_S_em2_P_power_state_name "suspend-to-idle"
#define DT_N_S_cpus_S_power_states_S_em2_P_power_state_name_STRING_UNQUOTED suspend-to-idle
#define DT_N_S_cpus_S_power_states_S_em2_P_power_state_name_STRING_TOKEN suspend_to_idle
#define DT_N_S_cpus_S_power_states_S_em2_P_power_state_name_STRING_UPPER_TOKEN SUSPEND_TO_IDLE
#define DT_N_S_cpus_S_power_states_S_em2_P_power_state_name_IDX_0 "suspend-to-idle"
#define DT_N_S_cpus_S_power_states_S_em2_P_power_state_name_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em2_P_power_state_name_ENUM_IDX 2
#define DT_N_S_cpus_S_power_states_S_em2_P_power_state_name_ENUM_VAL_suspend_to_idle_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em2_P_power_state_name_ENUM_TOKEN suspend_to_idle
#define DT_N_S_cpus_S_power_states_S_em2_P_power_state_name_ENUM_UPPER_TOKEN SUSPEND_TO_IDLE
#define DT_N_S_cpus_S_power_states_S_em2_P_power_state_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_power_states_S_em2, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_em2_P_power_state_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_power_states_S_em2, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_em2_P_power_state_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_power_states_S_em2, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_em2_P_power_state_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_power_states_S_em2, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_em2_P_power_state_name_LEN 1
#define DT_N_S_cpus_S_power_states_S_em2_P_power_state_name_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em2_P_min_residency_us 260
#define DT_N_S_cpus_S_power_states_S_em2_P_min_residency_us_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em2_P_exit_latency_us 250
#define DT_N_S_cpus_S_power_states_S_em2_P_exit_latency_us_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em2_P_zephyr_pm_device_disabled 0
#define DT_N_S_cpus_S_power_states_S_em2_P_zephyr_pm_device_disabled_EXISTS 1

/*
 * Devicetree node: /cpus/power-states/em3
 *
 * Node identifier: DT_N_S_cpus_S_power_states_S_em3
 *
 * Binding (compatible = zephyr,power-state):
 *   $ZEPHYR_BASE/dts/bindings/power/zephyr,power-state.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_power_states_S_em3_PATH "/cpus/power-states/em3"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_power_states_S_em3_FULL_NAME "em3"

/* Node parent (/cpus/power-states) identifier: */
#define DT_N_S_cpus_S_power_states_S_em3_PARENT DT_N_S_cpus_S_power_states

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_power_states_S_em3_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_cpus_S_power_states_S_em3_NODELABEL_NUM 1
#define DT_N_S_cpus_S_power_states_S_em3_FOREACH_NODELABEL(fn) fn(pstate_em3)
#define DT_N_S_cpus_S_power_states_S_em3_FOREACH_NODELABEL_VARGS(fn, ...) fn(pstate_em3, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_power_states_S_em3_CHILD_NUM 0
#define DT_N_S_cpus_S_power_states_S_em3_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_cpus_S_power_states_S_em3_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_power_states_S_em3_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_em3_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_em3_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_power_states_S_em3_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_power_states_S_em3_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_em3_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_em3_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_power_states_S_em3_ORD 23
#define DT_N_S_cpus_S_power_states_S_em3_ORD_STR_SORTABLE 00023

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_power_states_S_em3_REQUIRES_ORDS \
	20, /* /cpus/power-states */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_power_states_S_em3_SUPPORTS_ORDS \
	24, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_power_states_S_em3_EXISTS 1
#define DT_N_INST_2_zephyr_power_state DT_N_S_cpus_S_power_states_S_em3
#define DT_N_NODELABEL_pstate_em3      DT_N_S_cpus_S_power_states_S_em3

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_power_states_S_em3_REG_NUM 0
#define DT_N_S_cpus_S_power_states_S_em3_RANGES_NUM 0
#define DT_N_S_cpus_S_power_states_S_em3_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_power_states_S_em3_IRQ_NUM 0
#define DT_N_S_cpus_S_power_states_S_em3_IRQ_LEVEL 0
#define DT_N_S_cpus_S_power_states_S_em3_COMPAT_MATCHES_zephyr_power_state 1
#define DT_N_S_cpus_S_power_states_S_em3_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em3_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_cpus_S_power_states_S_em3_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em3_COMPAT_MODEL_IDX_0 "power-state"
#define DT_N_S_cpus_S_power_states_S_em3_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_power_states_S_em3_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_power_states_S_em3_P_power_state_name "standby"
#define DT_N_S_cpus_S_power_states_S_em3_P_power_state_name_STRING_UNQUOTED standby
#define DT_N_S_cpus_S_power_states_S_em3_P_power_state_name_STRING_TOKEN standby
#define DT_N_S_cpus_S_power_states_S_em3_P_power_state_name_STRING_UPPER_TOKEN STANDBY
#define DT_N_S_cpus_S_power_states_S_em3_P_power_state_name_IDX_0 "standby"
#define DT_N_S_cpus_S_power_states_S_em3_P_power_state_name_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em3_P_power_state_name_ENUM_IDX 3
#define DT_N_S_cpus_S_power_states_S_em3_P_power_state_name_ENUM_VAL_standby_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em3_P_power_state_name_ENUM_TOKEN standby
#define DT_N_S_cpus_S_power_states_S_em3_P_power_state_name_ENUM_UPPER_TOKEN STANDBY
#define DT_N_S_cpus_S_power_states_S_em3_P_power_state_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_power_states_S_em3, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_em3_P_power_state_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_power_states_S_em3, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_em3_P_power_state_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_power_states_S_em3, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_em3_P_power_state_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_power_states_S_em3, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_em3_P_power_state_name_LEN 1
#define DT_N_S_cpus_S_power_states_S_em3_P_power_state_name_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em3_P_min_residency_us 20000
#define DT_N_S_cpus_S_power_states_S_em3_P_min_residency_us_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em3_P_exit_latency_us 2000
#define DT_N_S_cpus_S_power_states_S_em3_P_exit_latency_us_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_em3_P_zephyr_pm_device_disabled 0
#define DT_N_S_cpus_S_power_states_S_em3_P_zephyr_pm_device_disabled_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = arm,cortex-m33):
 *   $ZEPHYR_BASE/dts/bindings/cpu/arm,cortex-m33.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_cpus_S_cpu_0_NODELABEL_NUM 1
#define DT_N_S_cpus_S_cpu_0_FOREACH_NODELABEL(fn) fn(cpu0)
#define DT_N_S_cpus_S_cpu_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(cpu0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_0_CHILD_NUM 0
#define DT_N_S_cpus_S_cpu_0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 24
#define DT_N_S_cpus_S_cpu_0_ORD_STR_SORTABLE 00024

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	19, /* /cpus */ \
	21, /* /cpus/power-states/em1 */ \
	22, /* /cpus/power-states/em2 */ \
	23, /* /cpus/power-states/em3 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_arm_cortex_m33 DT_N_S_cpus_S_cpu_0
#define DT_N_NODELABEL_cpu0        DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_IRQ_LEVEL 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_arm_cortex_m33 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0 "cortex-m33"
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible {"arm,cortex-m33"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "arm,cortex-m33"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UNQUOTED arm,cortex-m33
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_TOKEN arm_cortex_m33
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_CORTEX_M33
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_zephyr_deferred_init 0
#define DT_N_S_cpus_S_cpu_0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_clock_frequency 39000000
#define DT_N_S_cpus_S_cpu_0_P_clock_frequency_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_0 DT_N_S_cpus_S_power_states_S_em1
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_0_PH DT_N_S_cpus_S_power_states_S_em1
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_1 DT_N_S_cpus_S_power_states_S_em2
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_1_PH DT_N_S_cpus_S_power_states_S_em2
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_1_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_2 DT_N_S_cpus_S_power_states_S_em3
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_2_PH DT_N_S_cpus_S_power_states_S_em3
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_2_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0) \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1) \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 2)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 2)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 2, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 2, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_LEN 3
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_EXISTS 1

/*
 * Devicetree node: /leds
 *
 * Node identifier: DT_N_S_leds
 *
 * Binding (compatible = gpio-leds):
 *   $ZEPHYR_BASE/dts/bindings/led/gpio-leds.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_PATH "/leds"

/* Node's name with unit-address: */
#define DT_N_S_leds_FULL_NAME "leds"

/* Node parent (/) identifier: */
#define DT_N_S_leds_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_CHILD_IDX 9

/* Helpers for dealing with node labels: */
#define DT_N_S_leds_NODELABEL_NUM 0
#define DT_N_S_leds_FOREACH_NODELABEL(fn) 
#define DT_N_S_leds_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_CHILD_NUM 2
#define DT_N_S_leds_CHILD_NUM_STATUS_OKAY 2
#define DT_N_S_leds_FOREACH_CHILD(fn) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_leds_S_led_1)
#define DT_N_S_leds_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_leds_S_led_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds_S_led_1)
#define DT_N_S_leds_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__) fn(DT_N_S_leds_S_led_1, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds_S_led_1, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_leds_S_led_1)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_leds_S_led_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds_S_led_1)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__) fn(DT_N_S_leds_S_led_1, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds_S_led_1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_leds_ORD 25
#define DT_N_S_leds_ORD_STR_SORTABLE 00025

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_REQUIRES_ORDS \
	0, /* / */ \
	13, /* /soc/gpio@5003c000/gpio@5003c060 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_SUPPORTS_ORDS \
	26, /* /leds/led_0 */ \
	27, /* /leds/led_1 */

/* Existence and alternate IDs: */
#define DT_N_S_leds_EXISTS 1
#define DT_N_INST_0_gpio_leds DT_N_S_leds

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_REG_NUM 0
#define DT_N_S_leds_RANGES_NUM 0
#define DT_N_S_leds_FOREACH_RANGE(fn) 
#define DT_N_S_leds_IRQ_NUM 0
#define DT_N_S_leds_IRQ_LEVEL 0
#define DT_N_S_leds_COMPAT_MATCHES_gpio_leds 1
#define DT_N_S_leds_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_P_compatible {"gpio-leds"}
#define DT_N_S_leds_P_compatible_IDX_0 "gpio-leds"
#define DT_N_S_leds_P_compatible_IDX_0_STRING_UNQUOTED gpio-leds
#define DT_N_S_leds_P_compatible_IDX_0_STRING_TOKEN gpio_leds
#define DT_N_S_leds_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_LEDS
#define DT_N_S_leds_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_LEN 1
#define DT_N_S_leds_P_compatible_EXISTS 1

/*
 * Devicetree node: /leds/led_0
 *
 * Node identifier: DT_N_S_leds_S_led_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_led_0_PATH "/leds/led_0"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_led_0_FULL_NAME "led_0"

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_led_0_PARENT DT_N_S_leds

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_S_led_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_leds_S_led_0_NODELABEL_NUM 1
#define DT_N_S_leds_S_led_0_FOREACH_NODELABEL(fn) fn(led0)
#define DT_N_S_leds_S_led_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(led0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_S_led_0_CHILD_NUM 0
#define DT_N_S_leds_S_led_0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_leds_S_led_0_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_led_0_ORD 26
#define DT_N_S_leds_S_led_0_ORD_STR_SORTABLE 00026

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_led_0_REQUIRES_ORDS \
	13, /* /soc/gpio@5003c000/gpio@5003c060 */ \
	25, /* /leds */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_led_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_led_0_EXISTS 1
#define DT_N_ALIAS_led0     DT_N_S_leds_S_led_0
#define DT_N_NODELABEL_led0 DT_N_S_leds_S_led_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_led_0_REG_NUM 0
#define DT_N_S_leds_S_led_0_RANGES_NUM 0
#define DT_N_S_leds_S_led_0_FOREACH_RANGE(fn) 
#define DT_N_S_leds_S_led_0_IRQ_NUM 0
#define DT_N_S_leds_S_led_0_IRQ_LEVEL 0
#define DT_N_S_leds_S_led_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_led_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin 4
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_0, gpios, 0)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_0, gpios, 0)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_gpios_LEN 1
#define DT_N_S_leds_S_led_0_P_gpios_EXISTS 1
#define DT_N_S_leds_S_led_0_P_label "LED 0"
#define DT_N_S_leds_S_led_0_P_label_STRING_UNQUOTED LED 0
#define DT_N_S_leds_S_led_0_P_label_STRING_TOKEN LED_0
#define DT_N_S_leds_S_led_0_P_label_STRING_UPPER_TOKEN LED_0
#define DT_N_S_leds_S_led_0_P_label_IDX_0 "LED 0"
#define DT_N_S_leds_S_led_0_P_label_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_0, label, 0)
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_0, label, 0)
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_label_LEN 1
#define DT_N_S_leds_S_led_0_P_label_EXISTS 1

/*
 * Devicetree node: /leds/led_1
 *
 * Node identifier: DT_N_S_leds_S_led_1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_led_1_PATH "/leds/led_1"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_led_1_FULL_NAME "led_1"

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_led_1_PARENT DT_N_S_leds

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_S_led_1_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_leds_S_led_1_NODELABEL_NUM 1
#define DT_N_S_leds_S_led_1_FOREACH_NODELABEL(fn) fn(led1)
#define DT_N_S_leds_S_led_1_FOREACH_NODELABEL_VARGS(fn, ...) fn(led1, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_S_led_1_CHILD_NUM 0
#define DT_N_S_leds_S_led_1_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_leds_S_led_1_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_led_1_ORD 27
#define DT_N_S_leds_S_led_1_ORD_STR_SORTABLE 00027

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_led_1_REQUIRES_ORDS \
	13, /* /soc/gpio@5003c000/gpio@5003c060 */ \
	25, /* /leds */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_led_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_led_1_EXISTS 1
#define DT_N_ALIAS_led1     DT_N_S_leds_S_led_1
#define DT_N_NODELABEL_led1 DT_N_S_leds_S_led_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_led_1_REG_NUM 0
#define DT_N_S_leds_S_led_1_RANGES_NUM 0
#define DT_N_S_leds_S_led_1_FOREACH_RANGE(fn) 
#define DT_N_S_leds_S_led_1_IRQ_NUM 0
#define DT_N_S_leds_S_led_1_IRQ_LEVEL 0
#define DT_N_S_leds_S_led_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_led_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_pin 0
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_led_1_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_1, gpios, 0)
#define DT_N_S_leds_S_led_1_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_1, gpios, 0)
#define DT_N_S_leds_S_led_1_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_1, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_1_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_1, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_1_P_gpios_LEN 1
#define DT_N_S_leds_S_led_1_P_gpios_EXISTS 1
#define DT_N_S_leds_S_led_1_P_label "LED 1"
#define DT_N_S_leds_S_led_1_P_label_STRING_UNQUOTED LED 1
#define DT_N_S_leds_S_led_1_P_label_STRING_TOKEN LED_1
#define DT_N_S_leds_S_led_1_P_label_STRING_UPPER_TOKEN LED_1
#define DT_N_S_leds_S_led_1_P_label_IDX_0 "LED 1"
#define DT_N_S_leds_S_led_1_P_label_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_1_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_1, label, 0)
#define DT_N_S_leds_S_led_1_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_1, label, 0)
#define DT_N_S_leds_S_led_1_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_1, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_1_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_1, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_1_P_label_LEN 1
#define DT_N_S_leds_S_led_1_P_label_EXISTS 1

/*
 * Devicetree node: /pin-controller
 *
 * Node identifier: DT_N_S_pin_controller
 *
 * Binding (compatible = silabs,gecko-pinctrl):
 *   $ZEPHYR_BASE/dts/bindings/pinctrl/silabs,gecko-pinctrl.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_PATH "/pin-controller"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_FULL_NAME "pin-controller"

/* Node parent (/) identifier: */
#define DT_N_S_pin_controller_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_CHILD_IDX 7

/* Helpers for dealing with node labels: */
#define DT_N_S_pin_controller_NODELABEL_NUM 1
#define DT_N_S_pin_controller_FOREACH_NODELABEL(fn) fn(pinctrl)
#define DT_N_S_pin_controller_FOREACH_NODELABEL_VARGS(fn, ...) fn(pinctrl, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_CHILD_NUM 1
#define DT_N_S_pin_controller_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_pin_controller_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_usart0_default)
#define DT_N_S_pin_controller_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_usart0_default)
#define DT_N_S_pin_controller_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_usart0_default, __VA_ARGS__)
#define DT_N_S_pin_controller_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_usart0_default, __VA_ARGS__)
#define DT_N_S_pin_controller_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_usart0_default)
#define DT_N_S_pin_controller_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_usart0_default)
#define DT_N_S_pin_controller_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_usart0_default, __VA_ARGS__)
#define DT_N_S_pin_controller_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_usart0_default, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_ORD 28
#define DT_N_S_pin_controller_ORD_STR_SORTABLE 00028

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_SUPPORTS_ORDS \
	29, /* /pin-controller/usart0_default */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_EXISTS 1
#define DT_N_INST_0_silabs_gecko_pinctrl DT_N_S_pin_controller
#define DT_N_NODELABEL_pinctrl           DT_N_S_pin_controller

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_REG_NUM 0
#define DT_N_S_pin_controller_RANGES_NUM 0
#define DT_N_S_pin_controller_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_IRQ_NUM 0
#define DT_N_S_pin_controller_IRQ_LEVEL 0
#define DT_N_S_pin_controller_COMPAT_MATCHES_silabs_gecko_pinctrl 1
#define DT_N_S_pin_controller_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_pin_controller_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_COMPAT_MODEL_IDX_0 "gecko-pinctrl"
#define DT_N_S_pin_controller_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_P_wakeup_source 0
#define DT_N_S_pin_controller_P_wakeup_source_EXISTS 1
#define DT_N_S_pin_controller_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_pin_controller_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_pin_controller_P_compatible {"silabs,gecko-pinctrl"}
#define DT_N_S_pin_controller_P_compatible_IDX_0 "silabs,gecko-pinctrl"
#define DT_N_S_pin_controller_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-pinctrl
#define DT_N_S_pin_controller_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_pinctrl
#define DT_N_S_pin_controller_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_PINCTRL
#define DT_N_S_pin_controller_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller, compatible, 0)
#define DT_N_S_pin_controller_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller, compatible, 0)
#define DT_N_S_pin_controller_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_P_compatible_LEN 1
#define DT_N_S_pin_controller_P_compatible_EXISTS 1
#define DT_N_S_pin_controller_P_zephyr_deferred_init 0
#define DT_N_S_pin_controller_P_zephyr_deferred_init_EXISTS 1

/*
 * Devicetree node: /pin-controller/usart0_default
 *
 * Node identifier: DT_N_S_pin_controller_S_usart0_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_usart0_default_PATH "/pin-controller/usart0_default"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_usart0_default_FULL_NAME "usart0_default"

/* Node parent (/pin-controller) identifier: */
#define DT_N_S_pin_controller_S_usart0_default_PARENT DT_N_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_usart0_default_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_pin_controller_S_usart0_default_NODELABEL_NUM 1
#define DT_N_S_pin_controller_S_usart0_default_FOREACH_NODELABEL(fn) fn(usart0_default)
#define DT_N_S_pin_controller_S_usart0_default_FOREACH_NODELABEL_VARGS(fn, ...) fn(usart0_default, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_usart0_default_CHILD_NUM 1
#define DT_N_S_pin_controller_S_usart0_default_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_pin_controller_S_usart0_default_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_usart0_default_S_group1)
#define DT_N_S_pin_controller_S_usart0_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_usart0_default_S_group1)
#define DT_N_S_pin_controller_S_usart0_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_usart0_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_usart0_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_usart0_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_usart0_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_usart0_default_S_group1)
#define DT_N_S_pin_controller_S_usart0_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_usart0_default_S_group1)
#define DT_N_S_pin_controller_S_usart0_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_usart0_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_usart0_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_usart0_default_S_group1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_usart0_default_ORD 29
#define DT_N_S_pin_controller_S_usart0_default_ORD_STR_SORTABLE 00029

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_usart0_default_REQUIRES_ORDS \
	28, /* /pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_usart0_default_SUPPORTS_ORDS \
	30, /* /pin-controller/usart0_default/group1 */ \
	38, /* /soc/usart@5005c000 */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_usart0_default_EXISTS 1
#define DT_N_NODELABEL_usart0_default DT_N_S_pin_controller_S_usart0_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_usart0_default_REG_NUM 0
#define DT_N_S_pin_controller_S_usart0_default_RANGES_NUM 0
#define DT_N_S_pin_controller_S_usart0_default_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_usart0_default_IRQ_NUM 0
#define DT_N_S_pin_controller_S_usart0_default_IRQ_LEVEL 0
#define DT_N_S_pin_controller_S_usart0_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_usart0_default_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_usart0_default_P_bias_disable 0
#define DT_N_S_pin_controller_S_usart0_default_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_bias_high_impedance 0
#define DT_N_S_pin_controller_S_usart0_default_P_bias_high_impedance_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_bias_bus_hold 0
#define DT_N_S_pin_controller_S_usart0_default_P_bias_bus_hold_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_bias_pull_up 0
#define DT_N_S_pin_controller_S_usart0_default_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_usart0_default_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_bias_pull_pin_default 0
#define DT_N_S_pin_controller_S_usart0_default_P_bias_pull_pin_default_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_usart0_default_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_usart0_default_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_drive_open_source 0
#define DT_N_S_pin_controller_S_usart0_default_P_drive_open_source_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_input_enable 0
#define DT_N_S_pin_controller_S_usart0_default_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_input_disable 0
#define DT_N_S_pin_controller_S_usart0_default_P_input_disable_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_input_schmitt_enable 0
#define DT_N_S_pin_controller_S_usart0_default_P_input_schmitt_enable_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_input_schmitt_disable 0
#define DT_N_S_pin_controller_S_usart0_default_P_input_schmitt_disable_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_low_power_enable 0
#define DT_N_S_pin_controller_S_usart0_default_P_low_power_enable_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_low_power_disable 0
#define DT_N_S_pin_controller_S_usart0_default_P_low_power_disable_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_output_disable 0
#define DT_N_S_pin_controller_S_usart0_default_P_output_disable_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_output_enable 0
#define DT_N_S_pin_controller_S_usart0_default_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_output_low 0
#define DT_N_S_pin_controller_S_usart0_default_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_output_high 0
#define DT_N_S_pin_controller_S_usart0_default_P_output_high_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_P_sleep_hardware_state 0
#define DT_N_S_pin_controller_S_usart0_default_P_sleep_hardware_state_EXISTS 1

/*
 * Devicetree node: /pin-controller/usart0_default/group1
 *
 * Node identifier: DT_N_S_pin_controller_S_usart0_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_usart0_default_S_group1_PATH "/pin-controller/usart0_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_usart0_default_S_group1_FULL_NAME "group1"

/* Node parent (/pin-controller/usart0_default) identifier: */
#define DT_N_S_pin_controller_S_usart0_default_S_group1_PARENT DT_N_S_pin_controller_S_usart0_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_usart0_default_S_group1_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_pin_controller_S_usart0_default_S_group1_NODELABEL_NUM 0
#define DT_N_S_pin_controller_S_usart0_default_S_group1_FOREACH_NODELABEL(fn) 
#define DT_N_S_pin_controller_S_usart0_default_S_group1_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_usart0_default_S_group1_CHILD_NUM 0
#define DT_N_S_pin_controller_S_usart0_default_S_group1_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_pin_controller_S_usart0_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_usart0_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_usart0_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_usart0_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_usart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_usart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_usart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_usart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_usart0_default_S_group1_ORD 30
#define DT_N_S_pin_controller_S_usart0_default_S_group1_ORD_STR_SORTABLE 00030

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_usart0_default_S_group1_REQUIRES_ORDS \
	29, /* /pin-controller/usart0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_usart0_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_usart0_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_usart0_default_S_group1_REG_NUM 0
#define DT_N_S_pin_controller_S_usart0_default_S_group1_RANGES_NUM 0
#define DT_N_S_pin_controller_S_usart0_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_usart0_default_S_group1_IRQ_NUM 0
#define DT_N_S_pin_controller_S_usart0_default_S_group1_IRQ_LEVEL 0
#define DT_N_S_pin_controller_S_usart0_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_usart0_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_usart0_default_S_group1_P_psels {8 /* 0x8 */, 16777225 /* 0x1000009 */, 67108864 /* 0x4000000 */}
#define DT_N_S_pin_controller_S_usart0_default_S_group1_P_psels_IDX_0 8
#define DT_N_S_pin_controller_S_usart0_default_S_group1_P_psels_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_S_group1_P_psels_IDX_1 16777225
#define DT_N_S_pin_controller_S_usart0_default_S_group1_P_psels_IDX_1_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_S_group1_P_psels_IDX_2 67108864
#define DT_N_S_pin_controller_S_usart0_default_S_group1_P_psels_IDX_2_EXISTS 1
#define DT_N_S_pin_controller_S_usart0_default_S_group1_P_psels_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_usart0_default_S_group1, psels, 0) \
	fn(DT_N_S_pin_controller_S_usart0_default_S_group1, psels, 1) \
	fn(DT_N_S_pin_controller_S_usart0_default_S_group1, psels, 2)
#define DT_N_S_pin_controller_S_usart0_default_S_group1_P_psels_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_usart0_default_S_group1, psels, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_usart0_default_S_group1, psels, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_usart0_default_S_group1, psels, 2)
#define DT_N_S_pin_controller_S_usart0_default_S_group1_P_psels_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_usart0_default_S_group1, psels, 0, __VA_ARGS__) \
	fn(DT_N_S_pin_controller_S_usart0_default_S_group1, psels, 1, __VA_ARGS__) \
	fn(DT_N_S_pin_controller_S_usart0_default_S_group1, psels, 2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_usart0_default_S_group1_P_psels_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_usart0_default_S_group1, psels, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_usart0_default_S_group1, psels, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_usart0_default_S_group1, psels, 2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_usart0_default_S_group1_P_psels_LEN 3
#define DT_N_S_pin_controller_S_usart0_default_S_group1_P_psels_EXISTS 1

/*
 * Devicetree node: /soc/adc@59004000
 *
 * Node identifier: DT_N_S_soc_S_adc_59004000
 *
 * Binding (compatible = silabs,gecko-iadc):
 *   $ZEPHYR_BASE/dts/bindings/adc/silabs,gecko-iadc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_adc_59004000_PATH "/soc/adc@59004000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_adc_59004000_FULL_NAME "adc@59004000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_adc_59004000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_adc_59004000_CHILD_IDX 12

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_adc_59004000_NODELABEL_NUM 1
#define DT_N_S_soc_S_adc_59004000_FOREACH_NODELABEL(fn) fn(adc0)
#define DT_N_S_soc_S_adc_59004000_FOREACH_NODELABEL_VARGS(fn, ...) fn(adc0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_adc_59004000_CHILD_NUM 0
#define DT_N_S_soc_S_adc_59004000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_adc_59004000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_adc_59004000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_adc_59004000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_adc_59004000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_adc_59004000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_adc_59004000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_adc_59004000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_adc_59004000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_adc_59004000_ORD 31
#define DT_N_S_soc_S_adc_59004000_ORD_STR_SORTABLE 00031

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_adc_59004000_REQUIRES_ORDS \
	4, /* /soc */ \
	5, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_adc_59004000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_adc_59004000_EXISTS 1
#define DT_N_INST_0_silabs_gecko_iadc DT_N_S_soc_S_adc_59004000
#define DT_N_NODELABEL_adc0           DT_N_S_soc_S_adc_59004000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_adc_59004000_REG_NUM 1
#define DT_N_S_soc_S_adc_59004000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_REG_IDX_0_VAL_ADDRESS 1493188608 /* 0x59004000 */
#define DT_N_S_soc_S_adc_59004000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_adc_59004000_RANGES_NUM 0
#define DT_N_S_soc_S_adc_59004000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_adc_59004000_IRQ_NUM 1
#define DT_N_S_soc_S_adc_59004000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_IRQ_IDX_0_VAL_irq 49
#define DT_N_S_soc_S_adc_59004000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_adc_59004000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_S_soc_S_adc_59004000_IRQ_LEVEL 1
#define DT_N_S_soc_S_adc_59004000_COMPAT_MATCHES_silabs_gecko_iadc 1
#define DT_N_S_soc_S_adc_59004000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_soc_S_adc_59004000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_COMPAT_MODEL_IDX_0 "gecko-iadc"
#define DT_N_S_soc_S_adc_59004000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_adc_59004000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_adc_59004000_P_wakeup_source 0
#define DT_N_S_soc_S_adc_59004000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_adc_59004000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_P_status "disabled"
#define DT_N_S_soc_S_adc_59004000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_adc_59004000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_adc_59004000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_adc_59004000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_adc_59004000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_adc_59004000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_adc_59004000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_adc_59004000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_59004000, status, 0)
#define DT_N_S_soc_S_adc_59004000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_59004000, status, 0)
#define DT_N_S_soc_S_adc_59004000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_59004000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_59004000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_59004000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_59004000_P_status_LEN 1
#define DT_N_S_soc_S_adc_59004000_P_status_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_P_compatible {"silabs,gecko-iadc"}
#define DT_N_S_soc_S_adc_59004000_P_compatible_IDX_0 "silabs,gecko-iadc"
#define DT_N_S_soc_S_adc_59004000_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-iadc
#define DT_N_S_soc_S_adc_59004000_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_iadc
#define DT_N_S_soc_S_adc_59004000_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_IADC
#define DT_N_S_soc_S_adc_59004000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_59004000, compatible, 0)
#define DT_N_S_soc_S_adc_59004000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_59004000, compatible, 0)
#define DT_N_S_soc_S_adc_59004000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_59004000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_59004000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_59004000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_59004000_P_compatible_LEN 1
#define DT_N_S_soc_S_adc_59004000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_P_reg {1493188608 /* 0x59004000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_adc_59004000_P_reg_IDX_0 1493188608
#define DT_N_S_soc_S_adc_59004000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_adc_59004000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_P_reg_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_P_interrupts {49 /* 0x31 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_adc_59004000_P_interrupts_IDX_0 49
#define DT_N_S_soc_S_adc_59004000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_adc_59004000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_adc_59004000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_adc_59004000_P_zephyr_deferred_init_EXISTS 1

/*
 * Devicetree node: /soc/burtc@50064000
 *
 * Node identifier: DT_N_S_soc_S_burtc_50064000
 *
 * Binding (compatible = silabs,gecko-burtc):
 *   $ZEPHYR_BASE/dts/bindings/timer/silabs,gecko-burtc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_burtc_50064000_PATH "/soc/burtc@50064000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_burtc_50064000_FULL_NAME "burtc@50064000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_burtc_50064000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_burtc_50064000_CHILD_IDX 5

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_burtc_50064000_NODELABEL_NUM 1
#define DT_N_S_soc_S_burtc_50064000_FOREACH_NODELABEL(fn) fn(burtc0)
#define DT_N_S_soc_S_burtc_50064000_FOREACH_NODELABEL_VARGS(fn, ...) fn(burtc0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_burtc_50064000_CHILD_NUM 0
#define DT_N_S_soc_S_burtc_50064000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_burtc_50064000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_burtc_50064000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_burtc_50064000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_burtc_50064000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_burtc_50064000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_burtc_50064000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_burtc_50064000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_burtc_50064000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_burtc_50064000_ORD 32
#define DT_N_S_soc_S_burtc_50064000_ORD_STR_SORTABLE 00032

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_burtc_50064000_REQUIRES_ORDS \
	4, /* /soc */ \
	5, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_burtc_50064000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_burtc_50064000_EXISTS 1
#define DT_N_INST_0_silabs_gecko_burtc DT_N_S_soc_S_burtc_50064000
#define DT_N_NODELABEL_burtc0          DT_N_S_soc_S_burtc_50064000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_burtc_50064000_REG_NUM 1
#define DT_N_S_soc_S_burtc_50064000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_REG_IDX_0_VAL_ADDRESS 1342586880 /* 0x50064000 */
#define DT_N_S_soc_S_burtc_50064000_REG_IDX_0_VAL_SIZE 12340 /* 0x3034 */
#define DT_N_S_soc_S_burtc_50064000_RANGES_NUM 0
#define DT_N_S_soc_S_burtc_50064000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_burtc_50064000_IRQ_NUM 1
#define DT_N_S_soc_S_burtc_50064000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_IRQ_IDX_0_VAL_irq 18
#define DT_N_S_soc_S_burtc_50064000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_burtc_50064000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_S_soc_S_burtc_50064000_IRQ_LEVEL 1
#define DT_N_S_soc_S_burtc_50064000_COMPAT_MATCHES_silabs_gecko_burtc 1
#define DT_N_S_soc_S_burtc_50064000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_soc_S_burtc_50064000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_COMPAT_MODEL_IDX_0 "gecko-burtc"
#define DT_N_S_soc_S_burtc_50064000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_burtc_50064000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_burtc_50064000_P_wakeup_source 0
#define DT_N_S_soc_S_burtc_50064000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_burtc_50064000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_P_status "disabled"
#define DT_N_S_soc_S_burtc_50064000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_burtc_50064000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_burtc_50064000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_burtc_50064000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_burtc_50064000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_burtc_50064000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_burtc_50064000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_burtc_50064000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_burtc_50064000, status, 0)
#define DT_N_S_soc_S_burtc_50064000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_burtc_50064000, status, 0)
#define DT_N_S_soc_S_burtc_50064000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_burtc_50064000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_burtc_50064000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_burtc_50064000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_burtc_50064000_P_status_LEN 1
#define DT_N_S_soc_S_burtc_50064000_P_status_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_P_compatible {"silabs,gecko-burtc"}
#define DT_N_S_soc_S_burtc_50064000_P_compatible_IDX_0 "silabs,gecko-burtc"
#define DT_N_S_soc_S_burtc_50064000_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-burtc
#define DT_N_S_soc_S_burtc_50064000_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_burtc
#define DT_N_S_soc_S_burtc_50064000_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_BURTC
#define DT_N_S_soc_S_burtc_50064000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_burtc_50064000, compatible, 0)
#define DT_N_S_soc_S_burtc_50064000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_burtc_50064000, compatible, 0)
#define DT_N_S_soc_S_burtc_50064000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_burtc_50064000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_burtc_50064000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_burtc_50064000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_burtc_50064000_P_compatible_LEN 1
#define DT_N_S_soc_S_burtc_50064000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_P_reg {1342586880 /* 0x50064000 */, 12340 /* 0x3034 */}
#define DT_N_S_soc_S_burtc_50064000_P_reg_IDX_0 1342586880
#define DT_N_S_soc_S_burtc_50064000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_P_reg_IDX_1 12340
#define DT_N_S_soc_S_burtc_50064000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_P_reg_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_P_interrupts {18 /* 0x12 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_burtc_50064000_P_interrupts_IDX_0 18
#define DT_N_S_soc_S_burtc_50064000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_burtc_50064000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_burtc_50064000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_burtc_50064000_P_zephyr_deferred_init_EXISTS 1

/*
 * Devicetree node: /soc/i2c@5b000000
 *
 * Node identifier: DT_N_S_soc_S_i2c_5b000000
 *
 * Binding (compatible = silabs,gecko-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/silabs,gecko-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_5b000000_PATH "/soc/i2c@5b000000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_5b000000_FULL_NAME "i2c@5b000000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_5b000000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_i2c_5b000000_CHILD_IDX 7

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_i2c_5b000000_NODELABEL_NUM 1
#define DT_N_S_soc_S_i2c_5b000000_FOREACH_NODELABEL(fn) fn(i2c0)
#define DT_N_S_soc_S_i2c_5b000000_FOREACH_NODELABEL_VARGS(fn, ...) fn(i2c0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_i2c_5b000000_CHILD_NUM 0
#define DT_N_S_soc_S_i2c_5b000000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_i2c_5b000000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_5b000000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_5b000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_5b000000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_i2c_5b000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2c_5b000000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_5b000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_5b000000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_5b000000_ORD 33
#define DT_N_S_soc_S_i2c_5b000000_ORD_STR_SORTABLE 00033

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_5b000000_REQUIRES_ORDS \
	4, /* /soc */ \
	5, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_5b000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_5b000000_EXISTS 1
#define DT_N_INST_0_silabs_gecko_i2c DT_N_S_soc_S_i2c_5b000000
#define DT_N_NODELABEL_i2c0          DT_N_S_soc_S_i2c_5b000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2c_5b000000_REG_NUM 1
#define DT_N_S_soc_S_i2c_5b000000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_REG_IDX_0_VAL_ADDRESS 1526726656 /* 0x5b000000 */
#define DT_N_S_soc_S_i2c_5b000000_REG_IDX_0_VAL_SIZE 12356 /* 0x3044 */
#define DT_N_S_soc_S_i2c_5b000000_RANGES_NUM 0
#define DT_N_S_soc_S_i2c_5b000000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_i2c_5b000000_IRQ_NUM 1
#define DT_N_S_soc_S_i2c_5b000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_IRQ_IDX_0_VAL_irq 28
#define DT_N_S_soc_S_i2c_5b000000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_i2c_5b000000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_S_soc_S_i2c_5b000000_IRQ_LEVEL 1
#define DT_N_S_soc_S_i2c_5b000000_COMPAT_MATCHES_silabs_gecko_i2c 1
#define DT_N_S_soc_S_i2c_5b000000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_soc_S_i2c_5b000000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_COMPAT_MODEL_IDX_0 "gecko-i2c"
#define DT_N_S_soc_S_i2c_5b000000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2c_5b000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_5b000000_P_wakeup_source 0
#define DT_N_S_soc_S_i2c_5b000000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_i2c_5b000000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_P_status "disabled"
#define DT_N_S_soc_S_i2c_5b000000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_i2c_5b000000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_i2c_5b000000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_5b000000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_i2c_5b000000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_i2c_5b000000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_i2c_5b000000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_5b000000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_5b000000, status, 0)
#define DT_N_S_soc_S_i2c_5b000000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_5b000000, status, 0)
#define DT_N_S_soc_S_i2c_5b000000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_5b000000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_5b000000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_5b000000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_5b000000_P_status_LEN 1
#define DT_N_S_soc_S_i2c_5b000000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_P_compatible {"silabs,gecko-i2c"}
#define DT_N_S_soc_S_i2c_5b000000_P_compatible_IDX_0 "silabs,gecko-i2c"
#define DT_N_S_soc_S_i2c_5b000000_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-i2c
#define DT_N_S_soc_S_i2c_5b000000_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_i2c
#define DT_N_S_soc_S_i2c_5b000000_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_I2C
#define DT_N_S_soc_S_i2c_5b000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_5b000000, compatible, 0)
#define DT_N_S_soc_S_i2c_5b000000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_5b000000, compatible, 0)
#define DT_N_S_soc_S_i2c_5b000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_5b000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_5b000000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_5b000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_5b000000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_5b000000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_P_reg {1526726656 /* 0x5b000000 */, 12356 /* 0x3044 */}
#define DT_N_S_soc_S_i2c_5b000000_P_reg_IDX_0 1526726656
#define DT_N_S_soc_S_i2c_5b000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_P_reg_IDX_1 12356
#define DT_N_S_soc_S_i2c_5b000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_P_interrupts {28 /* 0x1c */, 0 /* 0x0 */}
#define DT_N_S_soc_S_i2c_5b000000_P_interrupts_IDX_0 28
#define DT_N_S_soc_S_i2c_5b000000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_i2c_5b000000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_i2c_5b000000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_P_clock_frequency 100000
#define DT_N_S_soc_S_i2c_5b000000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_P_sq_size 4
#define DT_N_S_soc_S_i2c_5b000000_P_sq_size_EXISTS 1
#define DT_N_S_soc_S_i2c_5b000000_P_cq_size 4
#define DT_N_S_soc_S_i2c_5b000000_P_cq_size_EXISTS 1

/*
 * Devicetree node: /soc/leuart@4006a000
 *
 * Node identifier: DT_N_S_soc_S_leuart_4006a000
 *
 * Binding (compatible = silabs,gecko-leuart):
 *   $ZEPHYR_BASE/dts/bindings/serial/silabs,gecko-leuart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_leuart_4006a000_PATH "/soc/leuart@4006a000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_leuart_4006a000_FULL_NAME "leuart@4006a000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_leuart_4006a000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_leuart_4006a000_CHILD_IDX 3

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_leuart_4006a000_NODELABEL_NUM 1
#define DT_N_S_soc_S_leuart_4006a000_FOREACH_NODELABEL(fn) fn(leuart1)
#define DT_N_S_soc_S_leuart_4006a000_FOREACH_NODELABEL_VARGS(fn, ...) fn(leuart1, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_leuart_4006a000_CHILD_NUM 0
#define DT_N_S_soc_S_leuart_4006a000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_leuart_4006a000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_leuart_4006a000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_leuart_4006a000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_leuart_4006a000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_leuart_4006a000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_leuart_4006a000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_leuart_4006a000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_leuart_4006a000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_leuart_4006a000_ORD 34
#define DT_N_S_soc_S_leuart_4006a000_ORD_STR_SORTABLE 00034

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_leuart_4006a000_REQUIRES_ORDS \
	4, /* /soc */ \
	5, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_leuart_4006a000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_leuart_4006a000_EXISTS 1
#define DT_N_INST_0_silabs_gecko_leuart DT_N_S_soc_S_leuart_4006a000
#define DT_N_NODELABEL_leuart1          DT_N_S_soc_S_leuart_4006a000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_leuart_4006a000_REG_NUM 1
#define DT_N_S_soc_S_leuart_4006a000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_REG_IDX_0_VAL_ADDRESS 1074176000 /* 0x4006a000 */
#define DT_N_S_soc_S_leuart_4006a000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_leuart_4006a000_RANGES_NUM 0
#define DT_N_S_soc_S_leuart_4006a000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_leuart_4006a000_IRQ_NUM 1
#define DT_N_S_soc_S_leuart_4006a000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_IRQ_IDX_0_VAL_irq 25
#define DT_N_S_soc_S_leuart_4006a000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_leuart_4006a000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_S_soc_S_leuart_4006a000_IRQ_LEVEL 1
#define DT_N_S_soc_S_leuart_4006a000_COMPAT_MATCHES_silabs_gecko_leuart 1
#define DT_N_S_soc_S_leuart_4006a000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_soc_S_leuart_4006a000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_COMPAT_MODEL_IDX_0 "gecko-leuart"
#define DT_N_S_soc_S_leuart_4006a000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_leuart_4006a000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_leuart_4006a000_P_wakeup_source 0
#define DT_N_S_soc_S_leuart_4006a000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_leuart_4006a000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_P_status "disabled"
#define DT_N_S_soc_S_leuart_4006a000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_leuart_4006a000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_leuart_4006a000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_leuart_4006a000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_leuart_4006a000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_leuart_4006a000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_leuart_4006a000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_leuart_4006a000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_leuart_4006a000, status, 0)
#define DT_N_S_soc_S_leuart_4006a000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_leuart_4006a000, status, 0)
#define DT_N_S_soc_S_leuart_4006a000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_leuart_4006a000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_leuart_4006a000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_leuart_4006a000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_leuart_4006a000_P_status_LEN 1
#define DT_N_S_soc_S_leuart_4006a000_P_status_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_P_compatible {"silabs,gecko-leuart"}
#define DT_N_S_soc_S_leuart_4006a000_P_compatible_IDX_0 "silabs,gecko-leuart"
#define DT_N_S_soc_S_leuart_4006a000_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-leuart
#define DT_N_S_soc_S_leuart_4006a000_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_leuart
#define DT_N_S_soc_S_leuart_4006a000_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_LEUART
#define DT_N_S_soc_S_leuart_4006a000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_leuart_4006a000, compatible, 0)
#define DT_N_S_soc_S_leuart_4006a000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_leuart_4006a000, compatible, 0)
#define DT_N_S_soc_S_leuart_4006a000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_leuart_4006a000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_leuart_4006a000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_leuart_4006a000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_leuart_4006a000_P_compatible_LEN 1
#define DT_N_S_soc_S_leuart_4006a000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_P_reg {1074176000 /* 0x4006a000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_leuart_4006a000_P_reg_IDX_0 1074176000
#define DT_N_S_soc_S_leuart_4006a000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_leuart_4006a000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_P_reg_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_P_interrupts {25 /* 0x19 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_leuart_4006a000_P_interrupts_IDX_0 25
#define DT_N_S_soc_S_leuart_4006a000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_leuart_4006a000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_leuart_4006a000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_P_hw_flow_control 0
#define DT_N_S_soc_S_leuart_4006a000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_leuart_4006a000_P_peripheral_id 0
#define DT_N_S_soc_S_leuart_4006a000_P_peripheral_id_EXISTS 1

/*
 * Devicetree node: /soc/semailbox@5c021000
 *
 * Node identifier: DT_N_S_soc_S_semailbox_5c021000
 *
 * Binding (compatible = silabs,gecko-semailbox):
 *   $ZEPHYR_BASE/dts/bindings/crypto/silabs,gecko-semailbox.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_semailbox_5c021000_PATH "/soc/semailbox@5c021000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_semailbox_5c021000_FULL_NAME "semailbox@5c021000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_semailbox_5c021000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_semailbox_5c021000_CHILD_IDX 6

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_semailbox_5c021000_NODELABEL_NUM 1
#define DT_N_S_soc_S_semailbox_5c021000_FOREACH_NODELABEL(fn) fn(se)
#define DT_N_S_soc_S_semailbox_5c021000_FOREACH_NODELABEL_VARGS(fn, ...) fn(se, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_semailbox_5c021000_CHILD_NUM 0
#define DT_N_S_soc_S_semailbox_5c021000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_semailbox_5c021000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_semailbox_5c021000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_semailbox_5c021000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_semailbox_5c021000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_semailbox_5c021000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_semailbox_5c021000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_semailbox_5c021000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_semailbox_5c021000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_semailbox_5c021000_ORD 35
#define DT_N_S_soc_S_semailbox_5c021000_ORD_STR_SORTABLE 00035

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_semailbox_5c021000_REQUIRES_ORDS \
	4, /* /soc */ \
	5, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_semailbox_5c021000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_semailbox_5c021000_EXISTS 1
#define DT_N_INST_0_silabs_gecko_semailbox DT_N_S_soc_S_semailbox_5c021000
#define DT_N_NODELABEL_se                  DT_N_S_soc_S_semailbox_5c021000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_semailbox_5c021000_REG_NUM 1
#define DT_N_S_soc_S_semailbox_5c021000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_REG_IDX_0_VAL_ADDRESS 1543639040 /* 0x5c021000 */
#define DT_N_S_soc_S_semailbox_5c021000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_semailbox_5c021000_RANGES_NUM 0
#define DT_N_S_soc_S_semailbox_5c021000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_NUM 3
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_0_VAL_irq 64
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_1_VAL_irq 65
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_1_VAL_priority 3
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_1_CONTROLLER DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_2_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_2_VAL_irq 66
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_2_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_2_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_2_VAL_priority 3
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_2_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_2_CONTROLLER DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_LEVEL 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_NAME_setamperhost_VAL_irq DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_NAME_setamperhost_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_NAME_setamperhost_VAL_priority DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_NAME_setamperhost_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_NAME_setamperhost_CONTROLLER DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_0_CONTROLLER
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_NAME_sembrx_VAL_irq DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_1_VAL_irq
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_NAME_sembrx_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_NAME_sembrx_VAL_priority DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_1_VAL_priority
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_NAME_sembrx_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_NAME_sembrx_CONTROLLER DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_1_CONTROLLER
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_NAME_sembtx_VAL_irq DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_2_VAL_irq
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_NAME_sembtx_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_NAME_sembtx_VAL_priority DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_2_VAL_priority
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_NAME_sembtx_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_IRQ_NAME_sembtx_CONTROLLER DT_N_S_soc_S_semailbox_5c021000_IRQ_IDX_2_CONTROLLER
#define DT_N_S_soc_S_semailbox_5c021000_COMPAT_MATCHES_silabs_gecko_semailbox 1
#define DT_N_S_soc_S_semailbox_5c021000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_soc_S_semailbox_5c021000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_COMPAT_MODEL_IDX_0 "gecko-semailbox"
#define DT_N_S_soc_S_semailbox_5c021000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_semailbox_5c021000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_semailbox_5c021000_P_wakeup_source 0
#define DT_N_S_soc_S_semailbox_5c021000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_semailbox_5c021000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_status "okay"
#define DT_N_S_soc_S_semailbox_5c021000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_semailbox_5c021000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_semailbox_5c021000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_semailbox_5c021000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_semailbox_5c021000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_semailbox_5c021000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_semailbox_5c021000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_semailbox_5c021000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_semailbox_5c021000, status, 0)
#define DT_N_S_soc_S_semailbox_5c021000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_semailbox_5c021000, status, 0)
#define DT_N_S_soc_S_semailbox_5c021000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_semailbox_5c021000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_semailbox_5c021000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_semailbox_5c021000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_semailbox_5c021000_P_status_LEN 1
#define DT_N_S_soc_S_semailbox_5c021000_P_status_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_compatible {"silabs,gecko-semailbox"}
#define DT_N_S_soc_S_semailbox_5c021000_P_compatible_IDX_0 "silabs,gecko-semailbox"
#define DT_N_S_soc_S_semailbox_5c021000_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-semailbox
#define DT_N_S_soc_S_semailbox_5c021000_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_semailbox
#define DT_N_S_soc_S_semailbox_5c021000_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_SEMAILBOX
#define DT_N_S_soc_S_semailbox_5c021000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_semailbox_5c021000, compatible, 0)
#define DT_N_S_soc_S_semailbox_5c021000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_semailbox_5c021000, compatible, 0)
#define DT_N_S_soc_S_semailbox_5c021000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_semailbox_5c021000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_semailbox_5c021000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_semailbox_5c021000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_semailbox_5c021000_P_compatible_LEN 1
#define DT_N_S_soc_S_semailbox_5c021000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_reg {1543639040 /* 0x5c021000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_semailbox_5c021000_P_reg_IDX_0 1543639040
#define DT_N_S_soc_S_semailbox_5c021000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_semailbox_5c021000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_reg_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupts {64 /* 0x40 */, 3 /* 0x3 */, 65 /* 0x41 */, 3 /* 0x3 */, 66 /* 0x42 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupts_IDX_0 64
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupts_IDX_2 65
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupts_IDX_3 3
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupts_IDX_4 66
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupts_IDX_4_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupts_IDX_5 3
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupts_IDX_5_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names {"SETAMPERHOST", "SEMBRX", "SEMBTX"}
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_IDX_0 "SETAMPERHOST"
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_IDX_0_STRING_UNQUOTED SETAMPERHOST
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_IDX_0_STRING_TOKEN SETAMPERHOST
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN SETAMPERHOST
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_IDX_1 "SEMBRX"
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_IDX_1_STRING_UNQUOTED SEMBRX
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_IDX_1_STRING_TOKEN SEMBRX
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_IDX_1_STRING_UPPER_TOKEN SEMBRX
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_IDX_2 "SEMBTX"
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_IDX_2_STRING_UNQUOTED SEMBTX
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_IDX_2_STRING_TOKEN SEMBTX
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_IDX_2_STRING_UPPER_TOKEN SEMBTX
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_IDX_2_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_semailbox_5c021000, interrupt_names, 0) \
	fn(DT_N_S_soc_S_semailbox_5c021000, interrupt_names, 1) \
	fn(DT_N_S_soc_S_semailbox_5c021000, interrupt_names, 2)
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_semailbox_5c021000, interrupt_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_semailbox_5c021000, interrupt_names, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_semailbox_5c021000, interrupt_names, 2)
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_semailbox_5c021000, interrupt_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_semailbox_5c021000, interrupt_names, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_semailbox_5c021000, interrupt_names, 2, __VA_ARGS__)
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_semailbox_5c021000, interrupt_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_semailbox_5c021000, interrupt_names, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_semailbox_5c021000, interrupt_names, 2, __VA_ARGS__)
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_LEN 3
#define DT_N_S_soc_S_semailbox_5c021000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_semailbox_5c021000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_semailbox_5c021000_P_zephyr_deferred_init_EXISTS 1

/*
 * Devicetree node: /soc/stimer@500a8000
 *
 * Node identifier: DT_N_S_soc_S_stimer_500a8000
 *
 * Binding (compatible = silabs,gecko-stimer):
 *   $ZEPHYR_BASE/dts/bindings/rtc/silabs,gecko-stimer.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_stimer_500a8000_PATH "/soc/stimer@500a8000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_stimer_500a8000_FULL_NAME "stimer@500a8000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_stimer_500a8000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_stimer_500a8000_CHILD_IDX 8

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_stimer_500a8000_NODELABEL_NUM 1
#define DT_N_S_soc_S_stimer_500a8000_FOREACH_NODELABEL(fn) fn(stimer0)
#define DT_N_S_soc_S_stimer_500a8000_FOREACH_NODELABEL_VARGS(fn, ...) fn(stimer0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_stimer_500a8000_CHILD_NUM 0
#define DT_N_S_soc_S_stimer_500a8000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_stimer_500a8000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_stimer_500a8000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_stimer_500a8000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_stimer_500a8000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_stimer_500a8000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_stimer_500a8000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_stimer_500a8000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_stimer_500a8000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_stimer_500a8000_ORD 36
#define DT_N_S_soc_S_stimer_500a8000_ORD_STR_SORTABLE 00036

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_stimer_500a8000_REQUIRES_ORDS \
	4, /* /soc */ \
	5, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_stimer_500a8000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_stimer_500a8000_EXISTS 1
#define DT_N_INST_0_silabs_gecko_stimer DT_N_S_soc_S_stimer_500a8000
#define DT_N_NODELABEL_stimer0          DT_N_S_soc_S_stimer_500a8000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_stimer_500a8000_REG_NUM 1
#define DT_N_S_soc_S_stimer_500a8000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_REG_IDX_0_VAL_ADDRESS 1342865408 /* 0x500a8000 */
#define DT_N_S_soc_S_stimer_500a8000_REG_IDX_0_VAL_SIZE 12372 /* 0x3054 */
#define DT_N_S_soc_S_stimer_500a8000_RANGES_NUM 0
#define DT_N_S_soc_S_stimer_500a8000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_stimer_500a8000_IRQ_NUM 1
#define DT_N_S_soc_S_stimer_500a8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_IRQ_IDX_0_VAL_irq 67
#define DT_N_S_soc_S_stimer_500a8000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_stimer_500a8000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_S_soc_S_stimer_500a8000_IRQ_LEVEL 1
#define DT_N_S_soc_S_stimer_500a8000_COMPAT_MATCHES_silabs_gecko_stimer 1
#define DT_N_S_soc_S_stimer_500a8000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_soc_S_stimer_500a8000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_COMPAT_MODEL_IDX_0 "gecko-stimer"
#define DT_N_S_soc_S_stimer_500a8000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_stimer_500a8000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_stimer_500a8000_P_wakeup_source 0
#define DT_N_S_soc_S_stimer_500a8000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_stimer_500a8000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_P_status "disabled"
#define DT_N_S_soc_S_stimer_500a8000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_stimer_500a8000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_stimer_500a8000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_stimer_500a8000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_stimer_500a8000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_stimer_500a8000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_stimer_500a8000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_stimer_500a8000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_stimer_500a8000, status, 0)
#define DT_N_S_soc_S_stimer_500a8000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_stimer_500a8000, status, 0)
#define DT_N_S_soc_S_stimer_500a8000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_stimer_500a8000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_stimer_500a8000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_stimer_500a8000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_stimer_500a8000_P_status_LEN 1
#define DT_N_S_soc_S_stimer_500a8000_P_status_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_P_compatible {"silabs,gecko-stimer"}
#define DT_N_S_soc_S_stimer_500a8000_P_compatible_IDX_0 "silabs,gecko-stimer"
#define DT_N_S_soc_S_stimer_500a8000_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-stimer
#define DT_N_S_soc_S_stimer_500a8000_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_stimer
#define DT_N_S_soc_S_stimer_500a8000_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_STIMER
#define DT_N_S_soc_S_stimer_500a8000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_stimer_500a8000, compatible, 0)
#define DT_N_S_soc_S_stimer_500a8000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_stimer_500a8000, compatible, 0)
#define DT_N_S_soc_S_stimer_500a8000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_stimer_500a8000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_stimer_500a8000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_stimer_500a8000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_stimer_500a8000_P_compatible_LEN 1
#define DT_N_S_soc_S_stimer_500a8000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_P_reg {1342865408 /* 0x500a8000 */, 12372 /* 0x3054 */}
#define DT_N_S_soc_S_stimer_500a8000_P_reg_IDX_0 1342865408
#define DT_N_S_soc_S_stimer_500a8000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_P_reg_IDX_1 12372
#define DT_N_S_soc_S_stimer_500a8000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_P_reg_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_P_interrupts {67 /* 0x43 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_stimer_500a8000_P_interrupts_IDX_0 67
#define DT_N_S_soc_S_stimer_500a8000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_stimer_500a8000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_stimer_500a8000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_P_clock_frequency 32768
#define DT_N_S_soc_S_stimer_500a8000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_stimer_500a8000_P_prescaler 1
#define DT_N_S_soc_S_stimer_500a8000_P_prescaler_EXISTS 1

/*
 * Devicetree node: /soc/timer@e000e010
 *
 * Node identifier: DT_N_S_soc_S_timer_e000e010
 *
 * Binding (compatible = arm,armv8m-systick):
 *   $ZEPHYR_BASE/dts/bindings/timer/arm,armv8m-systick.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_timer_e000e010_PATH "/soc/timer@e000e010"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_timer_e000e010_FULL_NAME "timer@e000e010"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_timer_e000e010_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_timer_e000e010_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_timer_e000e010_NODELABEL_NUM 1
#define DT_N_S_soc_S_timer_e000e010_FOREACH_NODELABEL(fn) fn(systick)
#define DT_N_S_soc_S_timer_e000e010_FOREACH_NODELABEL_VARGS(fn, ...) fn(systick, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_timer_e000e010_CHILD_NUM 0
#define DT_N_S_soc_S_timer_e000e010_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_timer_e000e010_ORD 37
#define DT_N_S_soc_S_timer_e000e010_ORD_STR_SORTABLE 00037

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_timer_e000e010_REQUIRES_ORDS \
	4, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_timer_e000e010_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_timer_e000e010_EXISTS 1
#define DT_N_INST_0_arm_armv8m_systick DT_N_S_soc_S_timer_e000e010
#define DT_N_NODELABEL_systick         DT_N_S_soc_S_timer_e000e010

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_timer_e000e010_REG_NUM 1
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_VAL_ADDRESS 3758153744 /* 0xe000e010 */
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_VAL_SIZE 16 /* 0x10 */
#define DT_N_S_soc_S_timer_e000e010_RANGES_NUM 0
#define DT_N_S_soc_S_timer_e000e010_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_timer_e000e010_IRQ_NUM 0
#define DT_N_S_soc_S_timer_e000e010_IRQ_LEVEL 0
#define DT_N_S_soc_S_timer_e000e010_COMPAT_MATCHES_arm_armv8m_systick 1
#define DT_N_S_soc_S_timer_e000e010_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_soc_S_timer_e000e010_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_COMPAT_MODEL_IDX_0 "armv8m-systick"
#define DT_N_S_soc_S_timer_e000e010_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_timer_e000e010_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_timer_e000e010_P_wakeup_source 0
#define DT_N_S_soc_S_timer_e000e010_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_timer_e000e010_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible {"arm,armv8m-systick"}
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0 "arm,armv8m-systick"
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_STRING_UNQUOTED arm,armv8m-systick
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_STRING_TOKEN arm_armv8m_systick
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_ARMV8M_SYSTICK
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_LEN 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg {3758153744 /* 0xe000e010 */, 16 /* 0x10 */}
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_0 3758153744
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_1 16
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_timer_e000e010_P_zephyr_deferred_init_EXISTS 1

/*
 * Devicetree node: /soc/usart@5005c000
 *
 * Node identifier: DT_N_S_soc_S_usart_5005c000
 *
 * Binding (compatible = silabs,gecko-usart):
 *   $ZEPHYR_BASE/dts/bindings/serial/silabs,gecko-usart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_usart_5005c000_PATH "/soc/usart@5005c000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_usart_5005c000_FULL_NAME "usart@5005c000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_usart_5005c000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_usart_5005c000_CHILD_IDX 4

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_usart_5005c000_NODELABEL_NUM 1
#define DT_N_S_soc_S_usart_5005c000_FOREACH_NODELABEL(fn) fn(usart0)
#define DT_N_S_soc_S_usart_5005c000_FOREACH_NODELABEL_VARGS(fn, ...) fn(usart0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_usart_5005c000_CHILD_NUM 0
#define DT_N_S_soc_S_usart_5005c000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_usart_5005c000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_usart_5005c000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_usart_5005c000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_usart_5005c000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_usart_5005c000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_usart_5005c000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_usart_5005c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_usart_5005c000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_usart_5005c000_ORD 38
#define DT_N_S_soc_S_usart_5005c000_ORD_STR_SORTABLE 00038

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_usart_5005c000_REQUIRES_ORDS \
	4, /* /soc */ \
	5, /* /soc/interrupt-controller@e000e100 */ \
	29, /* /pin-controller/usart0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_usart_5005c000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_usart_5005c000_EXISTS 1
#define DT_N_INST_0_silabs_gecko_usart DT_N_S_soc_S_usart_5005c000
#define DT_N_NODELABEL_usart0          DT_N_S_soc_S_usart_5005c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_usart_5005c000_REG_NUM 1
#define DT_N_S_soc_S_usart_5005c000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_REG_IDX_0_VAL_ADDRESS 1342554112 /* 0x5005c000 */
#define DT_N_S_soc_S_usart_5005c000_REG_IDX_0_VAL_SIZE 12396 /* 0x306c */
#define DT_N_S_soc_S_usart_5005c000_RANGES_NUM 0
#define DT_N_S_soc_S_usart_5005c000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_usart_5005c000_IRQ_NUM 2
#define DT_N_S_soc_S_usart_5005c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_IRQ_IDX_0_VAL_irq 9
#define DT_N_S_soc_S_usart_5005c000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_usart_5005c000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_S_soc_S_usart_5005c000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_IRQ_IDX_1_VAL_irq 10
#define DT_N_S_soc_S_usart_5005c000_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_IRQ_IDX_1_VAL_priority 0
#define DT_N_S_soc_S_usart_5005c000_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_IRQ_IDX_1_CONTROLLER DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_S_soc_S_usart_5005c000_IRQ_LEVEL 1
#define DT_N_S_soc_S_usart_5005c000_IRQ_NAME_rx_VAL_irq DT_N_S_soc_S_usart_5005c000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_usart_5005c000_IRQ_NAME_rx_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_IRQ_NAME_rx_VAL_priority DT_N_S_soc_S_usart_5005c000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_usart_5005c000_IRQ_NAME_rx_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_IRQ_NAME_rx_CONTROLLER DT_N_S_soc_S_usart_5005c000_IRQ_IDX_0_CONTROLLER
#define DT_N_S_soc_S_usart_5005c000_IRQ_NAME_tx_VAL_irq DT_N_S_soc_S_usart_5005c000_IRQ_IDX_1_VAL_irq
#define DT_N_S_soc_S_usart_5005c000_IRQ_NAME_tx_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_IRQ_NAME_tx_VAL_priority DT_N_S_soc_S_usart_5005c000_IRQ_IDX_1_VAL_priority
#define DT_N_S_soc_S_usart_5005c000_IRQ_NAME_tx_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_IRQ_NAME_tx_CONTROLLER DT_N_S_soc_S_usart_5005c000_IRQ_IDX_1_CONTROLLER
#define DT_N_S_soc_S_usart_5005c000_COMPAT_MATCHES_silabs_gecko_usart 1
#define DT_N_S_soc_S_usart_5005c000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_soc_S_usart_5005c000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_COMPAT_MODEL_IDX_0 "gecko-usart"
#define DT_N_S_soc_S_usart_5005c000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_usart_5005c000_PINCTRL_NUM 1
#define DT_N_S_soc_S_usart_5005c000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_usart_5005c000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_usart_5005c000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_usart_5005c000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_pin_controller_S_usart0_default

/* Generic property macros: */
#define DT_N_S_soc_S_usart_5005c000_P_wakeup_source 0
#define DT_N_S_soc_S_usart_5005c000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_usart_5005c000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_status "okay"
#define DT_N_S_soc_S_usart_5005c000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_usart_5005c000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_usart_5005c000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_usart_5005c000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_usart_5005c000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_usart_5005c000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_usart_5005c000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_usart_5005c000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usart_5005c000, status, 0)
#define DT_N_S_soc_S_usart_5005c000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_usart_5005c000, status, 0)
#define DT_N_S_soc_S_usart_5005c000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usart_5005c000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usart_5005c000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_usart_5005c000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usart_5005c000_P_status_LEN 1
#define DT_N_S_soc_S_usart_5005c000_P_status_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_compatible {"silabs,gecko-usart"}
#define DT_N_S_soc_S_usart_5005c000_P_compatible_IDX_0 "silabs,gecko-usart"
#define DT_N_S_soc_S_usart_5005c000_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-usart
#define DT_N_S_soc_S_usart_5005c000_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_usart
#define DT_N_S_soc_S_usart_5005c000_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_USART
#define DT_N_S_soc_S_usart_5005c000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usart_5005c000, compatible, 0)
#define DT_N_S_soc_S_usart_5005c000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_usart_5005c000, compatible, 0)
#define DT_N_S_soc_S_usart_5005c000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usart_5005c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usart_5005c000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_usart_5005c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usart_5005c000_P_compatible_LEN 1
#define DT_N_S_soc_S_usart_5005c000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_reg {1342554112 /* 0x5005c000 */, 12396 /* 0x306c */}
#define DT_N_S_soc_S_usart_5005c000_P_reg_IDX_0 1342554112
#define DT_N_S_soc_S_usart_5005c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_reg_IDX_1 12396
#define DT_N_S_soc_S_usart_5005c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_reg_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_interrupts {9 /* 0x9 */, 0 /* 0x0 */, 10 /* 0xa */, 0 /* 0x0 */}
#define DT_N_S_soc_S_usart_5005c000_P_interrupts_IDX_0 9
#define DT_N_S_soc_S_usart_5005c000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_usart_5005c000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_interrupts_IDX_2 10
#define DT_N_S_soc_S_usart_5005c000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_interrupts_IDX_3 0
#define DT_N_S_soc_S_usart_5005c000_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_interrupt_names {"rx", "tx"}
#define DT_N_S_soc_S_usart_5005c000_P_interrupt_names_IDX_0 "rx"
#define DT_N_S_soc_S_usart_5005c000_P_interrupt_names_IDX_0_STRING_UNQUOTED rx
#define DT_N_S_soc_S_usart_5005c000_P_interrupt_names_IDX_0_STRING_TOKEN rx
#define DT_N_S_soc_S_usart_5005c000_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN RX
#define DT_N_S_soc_S_usart_5005c000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_interrupt_names_IDX_1 "tx"
#define DT_N_S_soc_S_usart_5005c000_P_interrupt_names_IDX_1_STRING_UNQUOTED tx
#define DT_N_S_soc_S_usart_5005c000_P_interrupt_names_IDX_1_STRING_TOKEN tx
#define DT_N_S_soc_S_usart_5005c000_P_interrupt_names_IDX_1_STRING_UPPER_TOKEN TX
#define DT_N_S_soc_S_usart_5005c000_P_interrupt_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usart_5005c000, interrupt_names, 0) \
	fn(DT_N_S_soc_S_usart_5005c000, interrupt_names, 1)
#define DT_N_S_soc_S_usart_5005c000_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_usart_5005c000, interrupt_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_usart_5005c000, interrupt_names, 1)
#define DT_N_S_soc_S_usart_5005c000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usart_5005c000, interrupt_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usart_5005c000, interrupt_names, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usart_5005c000_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_usart_5005c000, interrupt_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_usart_5005c000, interrupt_names, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usart_5005c000_P_interrupt_names_LEN 2
#define DT_N_S_soc_S_usart_5005c000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_usart_5005c000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_current_speed 115200
#define DT_N_S_soc_S_usart_5005c000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_hw_flow_control 0
#define DT_N_S_soc_S_usart_5005c000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_0_IDX_0 DT_N_S_pin_controller_S_usart0_default
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_0_IDX_0_PH DT_N_S_pin_controller_S_usart0_default
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usart_5005c000, pinctrl_0, 0)
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_usart_5005c000, pinctrl_0, 0)
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usart_5005c000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_usart_5005c000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_names_IDX_0_STRING_UNQUOTED default
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usart_5005c000, pinctrl_names, 0)
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_usart_5005c000, pinctrl_names, 0)
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usart_5005c000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_usart_5005c000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_usart_5005c000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_usart_5005c000_P_peripheral_id 0
#define DT_N_S_soc_S_usart_5005c000_P_peripheral_id_EXISTS 1

/*
 * Devicetree node: /soc/wdog@5b004000
 *
 * Node identifier: DT_N_S_soc_S_wdog_5b004000
 *
 * Binding (compatible = silabs,gecko-wdog):
 *   $ZEPHYR_BASE/dts/bindings/watchdog/silabs,gecko-wdog.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_wdog_5b004000_PATH "/soc/wdog@5b004000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_wdog_5b004000_FULL_NAME "wdog@5b004000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_wdog_5b004000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_wdog_5b004000_CHILD_IDX 10

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_wdog_5b004000_NODELABEL_NUM 1
#define DT_N_S_soc_S_wdog_5b004000_FOREACH_NODELABEL(fn) fn(wdog0)
#define DT_N_S_soc_S_wdog_5b004000_FOREACH_NODELABEL_VARGS(fn, ...) fn(wdog0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_wdog_5b004000_CHILD_NUM 0
#define DT_N_S_soc_S_wdog_5b004000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_wdog_5b004000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_wdog_5b004000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_wdog_5b004000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_wdog_5b004000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_wdog_5b004000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_wdog_5b004000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_wdog_5b004000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_wdog_5b004000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_wdog_5b004000_ORD 39
#define DT_N_S_soc_S_wdog_5b004000_ORD_STR_SORTABLE 00039

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_wdog_5b004000_REQUIRES_ORDS \
	4, /* /soc */ \
	5, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_wdog_5b004000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_wdog_5b004000_EXISTS 1
#define DT_N_ALIAS_watchdog0          DT_N_S_soc_S_wdog_5b004000
#define DT_N_INST_0_silabs_gecko_wdog DT_N_S_soc_S_wdog_5b004000
#define DT_N_NODELABEL_wdog0          DT_N_S_soc_S_wdog_5b004000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_wdog_5b004000_REG_NUM 1
#define DT_N_S_soc_S_wdog_5b004000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_REG_IDX_0_VAL_ADDRESS 1526743040 /* 0x5b004000 */
#define DT_N_S_soc_S_wdog_5b004000_REG_IDX_0_VAL_SIZE 44 /* 0x2c */
#define DT_N_S_soc_S_wdog_5b004000_RANGES_NUM 0
#define DT_N_S_soc_S_wdog_5b004000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_wdog_5b004000_IRQ_NUM 1
#define DT_N_S_soc_S_wdog_5b004000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_IRQ_IDX_0_VAL_irq 42
#define DT_N_S_soc_S_wdog_5b004000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_wdog_5b004000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_S_soc_S_wdog_5b004000_IRQ_LEVEL 1
#define DT_N_S_soc_S_wdog_5b004000_COMPAT_MATCHES_silabs_gecko_wdog 1
#define DT_N_S_soc_S_wdog_5b004000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_soc_S_wdog_5b004000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_COMPAT_MODEL_IDX_0 "gecko-wdog"
#define DT_N_S_soc_S_wdog_5b004000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_wdog_5b004000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_wdog_5b004000_P_wakeup_source 0
#define DT_N_S_soc_S_wdog_5b004000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_wdog_5b004000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_P_status "okay"
#define DT_N_S_soc_S_wdog_5b004000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_wdog_5b004000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_wdog_5b004000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_wdog_5b004000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_wdog_5b004000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_wdog_5b004000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_wdog_5b004000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_wdog_5b004000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_wdog_5b004000, status, 0)
#define DT_N_S_soc_S_wdog_5b004000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_wdog_5b004000, status, 0)
#define DT_N_S_soc_S_wdog_5b004000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_wdog_5b004000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_5b004000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_wdog_5b004000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_5b004000_P_status_LEN 1
#define DT_N_S_soc_S_wdog_5b004000_P_status_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_P_compatible {"silabs,gecko-wdog"}
#define DT_N_S_soc_S_wdog_5b004000_P_compatible_IDX_0 "silabs,gecko-wdog"
#define DT_N_S_soc_S_wdog_5b004000_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-wdog
#define DT_N_S_soc_S_wdog_5b004000_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_wdog
#define DT_N_S_soc_S_wdog_5b004000_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_WDOG
#define DT_N_S_soc_S_wdog_5b004000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_wdog_5b004000, compatible, 0)
#define DT_N_S_soc_S_wdog_5b004000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_wdog_5b004000, compatible, 0)
#define DT_N_S_soc_S_wdog_5b004000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_wdog_5b004000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_5b004000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_wdog_5b004000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_5b004000_P_compatible_LEN 1
#define DT_N_S_soc_S_wdog_5b004000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_P_reg {1526743040 /* 0x5b004000 */, 44 /* 0x2c */}
#define DT_N_S_soc_S_wdog_5b004000_P_reg_IDX_0 1526743040
#define DT_N_S_soc_S_wdog_5b004000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_P_reg_IDX_1 44
#define DT_N_S_soc_S_wdog_5b004000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_P_reg_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_P_interrupts {42 /* 0x2a */, 0 /* 0x0 */}
#define DT_N_S_soc_S_wdog_5b004000_P_interrupts_IDX_0 42
#define DT_N_S_soc_S_wdog_5b004000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_wdog_5b004000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_wdog_5b004000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_wdog_5b004000_P_peripheral_id 0
#define DT_N_S_soc_S_wdog_5b004000_P_peripheral_id_EXISTS 1

/*
 * Devicetree node: /soc/wdog@5b008000
 *
 * Node identifier: DT_N_S_soc_S_wdog_5b008000
 *
 * Binding (compatible = silabs,gecko-wdog):
 *   $ZEPHYR_BASE/dts/bindings/watchdog/silabs,gecko-wdog.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_wdog_5b008000_PATH "/soc/wdog@5b008000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_wdog_5b008000_FULL_NAME "wdog@5b008000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_wdog_5b008000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_wdog_5b008000_CHILD_IDX 11

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_wdog_5b008000_NODELABEL_NUM 1
#define DT_N_S_soc_S_wdog_5b008000_FOREACH_NODELABEL(fn) fn(wdog1)
#define DT_N_S_soc_S_wdog_5b008000_FOREACH_NODELABEL_VARGS(fn, ...) fn(wdog1, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_wdog_5b008000_CHILD_NUM 0
#define DT_N_S_soc_S_wdog_5b008000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_wdog_5b008000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_wdog_5b008000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_wdog_5b008000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_wdog_5b008000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_wdog_5b008000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_wdog_5b008000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_wdog_5b008000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_wdog_5b008000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_wdog_5b008000_ORD 40
#define DT_N_S_soc_S_wdog_5b008000_ORD_STR_SORTABLE 00040

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_wdog_5b008000_REQUIRES_ORDS \
	4, /* /soc */ \
	5, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_wdog_5b008000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_wdog_5b008000_EXISTS 1
#define DT_N_INST_1_silabs_gecko_wdog DT_N_S_soc_S_wdog_5b008000
#define DT_N_NODELABEL_wdog1          DT_N_S_soc_S_wdog_5b008000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_wdog_5b008000_REG_NUM 1
#define DT_N_S_soc_S_wdog_5b008000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_REG_IDX_0_VAL_ADDRESS 1526759424 /* 0x5b008000 */
#define DT_N_S_soc_S_wdog_5b008000_REG_IDX_0_VAL_SIZE 44 /* 0x2c */
#define DT_N_S_soc_S_wdog_5b008000_RANGES_NUM 0
#define DT_N_S_soc_S_wdog_5b008000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_wdog_5b008000_IRQ_NUM 1
#define DT_N_S_soc_S_wdog_5b008000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_IRQ_IDX_0_VAL_irq 43
#define DT_N_S_soc_S_wdog_5b008000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_wdog_5b008000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_S_soc_S_wdog_5b008000_IRQ_LEVEL 1
#define DT_N_S_soc_S_wdog_5b008000_COMPAT_MATCHES_silabs_gecko_wdog 1
#define DT_N_S_soc_S_wdog_5b008000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_soc_S_wdog_5b008000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_COMPAT_MODEL_IDX_0 "gecko-wdog"
#define DT_N_S_soc_S_wdog_5b008000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_wdog_5b008000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_wdog_5b008000_P_wakeup_source 0
#define DT_N_S_soc_S_wdog_5b008000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_wdog_5b008000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_P_status "disabled"
#define DT_N_S_soc_S_wdog_5b008000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_wdog_5b008000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_wdog_5b008000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_wdog_5b008000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_wdog_5b008000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_wdog_5b008000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_wdog_5b008000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_wdog_5b008000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_wdog_5b008000, status, 0)
#define DT_N_S_soc_S_wdog_5b008000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_wdog_5b008000, status, 0)
#define DT_N_S_soc_S_wdog_5b008000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_wdog_5b008000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_5b008000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_wdog_5b008000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_5b008000_P_status_LEN 1
#define DT_N_S_soc_S_wdog_5b008000_P_status_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_P_compatible {"silabs,gecko-wdog"}
#define DT_N_S_soc_S_wdog_5b008000_P_compatible_IDX_0 "silabs,gecko-wdog"
#define DT_N_S_soc_S_wdog_5b008000_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-wdog
#define DT_N_S_soc_S_wdog_5b008000_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_wdog
#define DT_N_S_soc_S_wdog_5b008000_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_WDOG
#define DT_N_S_soc_S_wdog_5b008000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_wdog_5b008000, compatible, 0)
#define DT_N_S_soc_S_wdog_5b008000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_wdog_5b008000, compatible, 0)
#define DT_N_S_soc_S_wdog_5b008000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_wdog_5b008000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_5b008000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_wdog_5b008000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_5b008000_P_compatible_LEN 1
#define DT_N_S_soc_S_wdog_5b008000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_P_reg {1526759424 /* 0x5b008000 */, 44 /* 0x2c */}
#define DT_N_S_soc_S_wdog_5b008000_P_reg_IDX_0 1526759424
#define DT_N_S_soc_S_wdog_5b008000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_P_reg_IDX_1 44
#define DT_N_S_soc_S_wdog_5b008000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_P_reg_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_P_interrupts {43 /* 0x2b */, 0 /* 0x0 */}
#define DT_N_S_soc_S_wdog_5b008000_P_interrupts_IDX_0 43
#define DT_N_S_soc_S_wdog_5b008000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_wdog_5b008000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_wdog_5b008000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_wdog_5b008000_P_peripheral_id 1
#define DT_N_S_soc_S_wdog_5b008000_P_peripheral_id_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@50030000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_50030000
 *
 * Binding (compatible = silabs,gecko-flash-controller):
 *   $ZEPHYR_BASE/dts/bindings/flash_controller/silabs,gecko-flash-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_50030000_PATH "/soc/flash-controller@50030000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_50030000_FULL_NAME "flash-controller@50030000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flash_controller_50030000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_50030000_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_flash_controller_50030000_NODELABEL_NUM 1
#define DT_N_S_soc_S_flash_controller_50030000_FOREACH_NODELABEL(fn) fn(msc)
#define DT_N_S_soc_S_flash_controller_50030000_FOREACH_NODELABEL_VARGS(fn, ...) fn(msc, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_50030000_CHILD_NUM 1
#define DT_N_S_soc_S_flash_controller_50030000_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_soc_S_flash_controller_50030000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_50030000_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_50030000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_50030000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_50030000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_50030000_ORD 41
#define DT_N_S_soc_S_flash_controller_50030000_ORD_STR_SORTABLE 00041

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_50030000_REQUIRES_ORDS \
	4, /* /soc */ \
	5, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_50030000_SUPPORTS_ORDS \
	42, /* /soc/flash-controller@50030000/flash@0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_50030000_EXISTS 1
#define DT_N_INST_0_silabs_gecko_flash_controller DT_N_S_soc_S_flash_controller_50030000
#define DT_N_NODELABEL_msc                        DT_N_S_soc_S_flash_controller_50030000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_50030000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_50030000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_REG_IDX_0_VAL_ADDRESS 1342373888 /* 0x50030000 */
#define DT_N_S_soc_S_flash_controller_50030000_REG_IDX_0_VAL_SIZE 12616 /* 0x3148 */
#define DT_N_S_soc_S_flash_controller_50030000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_IRQ_NUM 1
#define DT_N_S_soc_S_flash_controller_50030000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_IRQ_IDX_0_VAL_irq 50
#define DT_N_S_soc_S_flash_controller_50030000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flash_controller_50030000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_S_soc_S_flash_controller_50030000_IRQ_LEVEL 1
#define DT_N_S_soc_S_flash_controller_50030000_COMPAT_MATCHES_silabs_gecko_flash_controller 1
#define DT_N_S_soc_S_flash_controller_50030000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_soc_S_flash_controller_50030000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_COMPAT_MODEL_IDX_0 "gecko-flash-controller"
#define DT_N_S_soc_S_flash_controller_50030000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_50030000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_50030000_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_50030000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flash_controller_50030000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_P_compatible {"silabs,gecko-flash-controller"}
#define DT_N_S_soc_S_flash_controller_50030000_P_compatible_IDX_0 "silabs,gecko-flash-controller"
#define DT_N_S_soc_S_flash_controller_50030000_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-flash-controller
#define DT_N_S_soc_S_flash_controller_50030000_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_flash_controller
#define DT_N_S_soc_S_flash_controller_50030000_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_FLASH_CONTROLLER
#define DT_N_S_soc_S_flash_controller_50030000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_50030000, compatible, 0)
#define DT_N_S_soc_S_flash_controller_50030000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_50030000, compatible, 0)
#define DT_N_S_soc_S_flash_controller_50030000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_50030000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_50030000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_50030000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_P_reg {1342373888 /* 0x50030000 */, 12616 /* 0x3148 */}
#define DT_N_S_soc_S_flash_controller_50030000_P_reg_IDX_0 1342373888
#define DT_N_S_soc_S_flash_controller_50030000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_P_reg_IDX_1 12616
#define DT_N_S_soc_S_flash_controller_50030000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_P_interrupts {50 /* 0x32 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flash_controller_50030000_P_interrupts_IDX_0 50
#define DT_N_S_soc_S_flash_controller_50030000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flash_controller_50030000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_flash_controller_50030000_P_zephyr_deferred_init_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@50030000/flash@0
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_50030000_S_flash_0
 *
 * Binding (compatible = soc-nv-flash):
 *   $ZEPHYR_BASE/dts/bindings/mtd/soc-nv-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_PATH "/soc/flash-controller@50030000/flash@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_FULL_NAME "flash@0"

/* Node parent (/soc/flash-controller@50030000) identifier: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_PARENT DT_N_S_soc_S_flash_controller_50030000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_NODELABEL_NUM 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_FOREACH_NODELABEL(fn) fn(flash0)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(flash0, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_CHILD_NUM 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_ORD 42
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_ORD_STR_SORTABLE 00042

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_REQUIRES_ORDS \
	41, /* /soc/flash-controller@50030000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_SUPPORTS_ORDS \
	43, /* /soc/flash-controller@50030000/flash@0/partitions */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_EXISTS 1
#define DT_N_INST_0_soc_nv_flash DT_N_S_soc_S_flash_controller_50030000_S_flash_0
#define DT_N_NODELABEL_flash0    DT_N_S_soc_S_flash_controller_50030000_S_flash_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_REG_IDX_0_VAL_SIZE 524288 /* 0x80000 */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_IRQ_LEVEL 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_COMPAT_MATCHES_soc_nv_flash 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_compatible {"soc-nv-flash"}
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_compatible_IDX_0 "soc-nv-flash"
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_compatible_IDX_0_STRING_UNQUOTED soc-nv-flash
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_compatible_IDX_0_STRING_TOKEN soc_nv_flash
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_compatible_IDX_0_STRING_UPPER_TOKEN SOC_NV_FLASH
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_reg {0 /* 0x0 */, 524288 /* 0x80000 */}
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_reg_IDX_1 524288
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_erase_block_size 8192
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_erase_block_size_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_write_block_size 4
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_P_write_block_size_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@50030000/flash@0/partitions
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions
 *
 * Binding (compatible = fixed-partitions):
 *   $ZEPHYR_BASE/dts/bindings/mtd/fixed-partitions.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_PATH "/soc/flash-controller@50030000/flash@0/partitions"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_FULL_NAME "partitions"

/* Node parent (/soc/flash-controller@50030000/flash@0) identifier: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_PARENT DT_N_S_soc_S_flash_controller_50030000_S_flash_0

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_NODELABEL_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_FOREACH_NODELABEL(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_FOREACH_NODELABEL_VARGS(fn, ...) 

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_CHILD_NUM 5
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_CHILD_NUM_STATUS_OKAY 5
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_ORD 43
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_ORD_STR_SORTABLE 00043

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_REQUIRES_ORDS \
	42, /* /soc/flash-controller@50030000/flash@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_SUPPORTS_ORDS \
	44, /* /soc/flash-controller@50030000/flash@0/partitions/partition@0 */ \
	45, /* /soc/flash-controller@50030000/flash@0/partitions/partition@c000 */ \
	46, /* /soc/flash-controller@50030000/flash@0/partitions/partition@80000 */ \
	47, /* /soc/flash-controller@50030000/flash@0/partitions/partition@f4000 */ \
	48, /* /soc/flash-controller@50030000/flash@0/partitions/partition@fc000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_EXISTS 1
#define DT_N_INST_0_fixed_partitions DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_REG_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_IRQ_LEVEL 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_COMPAT_MATCHES_fixed_partitions 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/flash-controller@50030000/flash@0/partitions/partition@0
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_PATH "/soc/flash-controller@50030000/flash@0/partitions/partition@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_FULL_NAME "partition@0"

/* Node parent (/soc/flash-controller@50030000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_PARENT DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_NODELABEL_NUM 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_FOREACH_NODELABEL(fn) fn(boot_partition)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(boot_partition, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_CHILD_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_ORD 44
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_ORD_STR_SORTABLE 00044

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_REQUIRES_ORDS \
	43, /* /soc/flash-controller@50030000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_EXISTS 1
#define DT_N_NODELABEL_boot_partition DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_VAL_SIZE 49152 /* 0xc000 */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_IRQ_LEVEL 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_PARTITION_ID 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_label "mcuboot"
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_label_STRING_UNQUOTED mcuboot
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_label_STRING_TOKEN mcuboot
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_label_STRING_UPPER_TOKEN MCUBOOT
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_label_IDX_0 "mcuboot"
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0, label, 0)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0, label, 0)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_read_only 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_reg {0 /* 0x0 */, 49152 /* 0xc000 */}
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_1 49152
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@50030000/flash@0/partitions/partition@c000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_PATH "/soc/flash-controller@50030000/flash@0/partitions/partition@c000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_FULL_NAME "partition@c000"

/* Node parent (/soc/flash-controller@50030000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_PARENT DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_NODELABEL_NUM 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_FOREACH_NODELABEL(fn) fn(slot0_partition)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_FOREACH_NODELABEL_VARGS(fn, ...) fn(slot0_partition, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_CHILD_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_ORD 45
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_ORD_STR_SORTABLE 00045

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_REQUIRES_ORDS \
	43, /* /soc/flash-controller@50030000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_EXISTS 1
#define DT_N_NODELABEL_slot0_partition DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_REG_IDX_0_VAL_ADDRESS 49152 /* 0xc000 */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_REG_IDX_0_VAL_SIZE 475136 /* 0x74000 */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_IRQ_LEVEL 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_PARTITION_ID 1

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_label "image-0"
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_label_STRING_UNQUOTED image-0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_label_STRING_TOKEN image_0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_label_STRING_UPPER_TOKEN IMAGE_0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_label_IDX_0 "image-0"
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000, label, 0)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000, label, 0)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_reg {49152 /* 0xc000 */, 475136 /* 0x74000 */}
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_reg_IDX_0 49152
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_reg_IDX_1 475136
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@50030000/flash@0/partitions/partition@80000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_PATH "/soc/flash-controller@50030000/flash@0/partitions/partition@80000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_FULL_NAME "partition@80000"

/* Node parent (/soc/flash-controller@50030000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_PARENT DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_NODELABEL_NUM 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_FOREACH_NODELABEL(fn) fn(slot1_partition)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_FOREACH_NODELABEL_VARGS(fn, ...) fn(slot1_partition, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_CHILD_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_ORD 46
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_ORD_STR_SORTABLE 00046

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_REQUIRES_ORDS \
	43, /* /soc/flash-controller@50030000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_EXISTS 1
#define DT_N_NODELABEL_slot1_partition DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_REG_IDX_0_VAL_ADDRESS 524288 /* 0x80000 */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_REG_IDX_0_VAL_SIZE 475136 /* 0x74000 */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_IRQ_LEVEL 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_PARTITION_ID 2

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_label "image-1"
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_label_STRING_UNQUOTED image-1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_label_STRING_TOKEN image_1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_label_STRING_UPPER_TOKEN IMAGE_1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_label_IDX_0 "image-1"
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000, label, 0)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000, label, 0)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_reg {524288 /* 0x80000 */, 475136 /* 0x74000 */}
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_reg_IDX_0 524288
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_reg_IDX_1 475136
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@50030000/flash@0/partitions/partition@f4000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_PATH "/soc/flash-controller@50030000/flash@0/partitions/partition@f4000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_FULL_NAME "partition@f4000"

/* Node parent (/soc/flash-controller@50030000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_PARENT DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_CHILD_IDX 3

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_NODELABEL_NUM 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_FOREACH_NODELABEL(fn) fn(scratch_partition)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_FOREACH_NODELABEL_VARGS(fn, ...) fn(scratch_partition, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_CHILD_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_ORD 47
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_ORD_STR_SORTABLE 00047

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_REQUIRES_ORDS \
	43, /* /soc/flash-controller@50030000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_EXISTS 1
#define DT_N_NODELABEL_scratch_partition DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_REG_IDX_0_VAL_ADDRESS 999424 /* 0xf4000 */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_REG_IDX_0_VAL_SIZE 32768 /* 0x8000 */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_IRQ_LEVEL 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_PARTITION_ID 3

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_label "image-scratch"
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_label_STRING_UNQUOTED image-scratch
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_label_STRING_TOKEN image_scratch
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_label_STRING_UPPER_TOKEN IMAGE_SCRATCH
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_label_IDX_0 "image-scratch"
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000, label, 0)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000, label, 0)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_reg {999424 /* 0xf4000 */, 32768 /* 0x8000 */}
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_reg_IDX_0 999424
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_reg_IDX_1 32768
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@50030000/flash@0/partitions/partition@fc000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_PATH "/soc/flash-controller@50030000/flash@0/partitions/partition@fc000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_FULL_NAME "partition@fc000"

/* Node parent (/soc/flash-controller@50030000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_PARENT DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_CHILD_IDX 4

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_NODELABEL_NUM 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_FOREACH_NODELABEL(fn) fn(storage_partition)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_FOREACH_NODELABEL_VARGS(fn, ...) fn(storage_partition, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_CHILD_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_ORD 48
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_ORD_STR_SORTABLE 00048

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_REQUIRES_ORDS \
	43, /* /soc/flash-controller@50030000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_EXISTS 1
#define DT_N_NODELABEL_storage_partition DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_REG_IDX_0_VAL_ADDRESS 1032192 /* 0xfc000 */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_REG_IDX_0_VAL_SIZE 540672 /* 0x84000 */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_IRQ_LEVEL 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_PARTITION_ID 4

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_label "storage"
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_label_STRING_UNQUOTED storage
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_label_STRING_TOKEN storage
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_label_STRING_UPPER_TOKEN STORAGE
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_label_IDX_0 "storage"
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000, label, 0)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000, label, 0)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_reg {1032192 /* 0xfc000 */, 540672 /* 0x84000 */}
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_reg_IDX_0 1032192
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_reg_IDX_1 540672
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/gpio@5003c000/gpio@5003c0C0
 *
 * Node identifier: DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0
 *
 * Binding (compatible = silabs,gecko-gpio-port):
 *   $ZEPHYR_BASE/dts/bindings/gpio/silabs,gecko-gpio-port.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_PATH "/soc/gpio@5003c000/gpio@5003c0C0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_FULL_NAME "gpio@5003c0C0"

/* Node parent (/soc/gpio@5003c000) identifier: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_PARENT DT_N_S_soc_S_gpio_5003c000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_CHILD_IDX 3

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_NODELABEL_NUM 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_FOREACH_NODELABEL(fn) fn(gpiod)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_FOREACH_NODELABEL_VARGS(fn, ...) fn(gpiod, __VA_ARGS__)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_CHILD_NUM 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_ORD 49
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_ORD_STR_SORTABLE 00049

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_REQUIRES_ORDS \
	6, /* /soc/gpio@5003c000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_EXISTS 1
#define DT_N_INST_3_silabs_gecko_gpio_port DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0
#define DT_N_NODELABEL_gpiod               DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_REG_NUM 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_REG_IDX_0_VAL_ADDRESS 1342423232 /* 0x5003c0c0 */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_REG_IDX_0_VAL_SIZE 48 /* 0x30 */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_IRQ_NUM 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_IRQ_LEVEL 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_COMPAT_MATCHES_silabs_gecko_gpio_port 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_COMPAT_VENDOR_IDX_0 "Silicon Laboratories"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_COMPAT_MODEL_IDX_0 "gecko-gpio-port"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_ngpios 32
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_status "okay"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0, status, 0)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0, status, 0)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_status_LEN 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_compatible {"silabs,gecko-gpio-port"}
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_compatible_IDX_0 "silabs,gecko-gpio-port"
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_compatible_IDX_0_STRING_UNQUOTED silabs,gecko-gpio-port
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_compatible_IDX_0_STRING_TOKEN silabs_gecko_gpio_port
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_compatible_IDX_0_STRING_UPPER_TOKEN SILABS_GECKO_GPIO_PORT
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0, compatible, 0)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0, compatible, 0)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_reg {1342423232 /* 0x5003c0c0 */, 48 /* 0x30 */}
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_reg_IDX_0 1342423232
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_reg_IDX_1 48
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_peripheral_id 3
#define DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0_P_peripheral_id_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_flash_controller        DT_N_S_soc_S_flash_controller_50030000
#define DT_CHOSEN_zephyr_flash_controller_EXISTS 1
#define DT_CHOSEN_zephyr_entropy                 DT_N_S_soc_S_semailbox_5c021000
#define DT_CHOSEN_zephyr_entropy_EXISTS          1
#define DT_CHOSEN_zephyr_console                 DT_N_S_soc_S_usart_5005c000
#define DT_CHOSEN_zephyr_console_EXISTS          1
#define DT_CHOSEN_zephyr_shell_uart              DT_N_S_soc_S_usart_5005c000
#define DT_CHOSEN_zephyr_shell_uart_EXISTS       1
#define DT_CHOSEN_zephyr_sram                    DT_N_S_memory_20000000
#define DT_CHOSEN_zephyr_sram_EXISTS             1
#define DT_CHOSEN_zephyr_flash                   DT_N_S_soc_S_flash_controller_50030000_S_flash_0
#define DT_CHOSEN_zephyr_flash_EXISTS            1
#define DT_CHOSEN_zephyr_code_partition          DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000
#define DT_CHOSEN_zephyr_code_partition_EXISTS   1

/* Macros for iterating over all nodes and enabled nodes */
#define DT_FOREACH_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_flash_controller_50030000) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000) fn(DT_N_S_soc_S_leuart_4006a000) fn(DT_N_S_soc_S_usart_5005c000) fn(DT_N_S_soc_S_burtc_50064000) fn(DT_N_S_soc_S_semailbox_5c021000) fn(DT_N_S_soc_S_i2c_5b000000) fn(DT_N_S_soc_S_stimer_500a8000) fn(DT_N_S_soc_S_gpio_5003c000) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0) fn(DT_N_S_soc_S_wdog_5b004000) fn(DT_N_S_soc_S_wdog_5b008000) fn(DT_N_S_soc_S_adc_59004000) fn(DT_N_S_clocks) fn(DT_N_S_clocks_S_clk_hfxo) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_power_states) fn(DT_N_S_cpus_S_power_states_S_em1) fn(DT_N_S_cpus_S_power_states_S_em2) fn(DT_N_S_cpus_S_power_states_S_em3) fn(DT_N_S_memory_20000000) fn(DT_N_S_bt_hci_silabs) fn(DT_N_S_pin_controller) fn(DT_N_S_pin_controller_S_usart0_default) fn(DT_N_S_pin_controller_S_usart0_default_S_group1) fn(DT_N_S_hwinfo) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_leds_S_led_1) fn(DT_N_S_buttons) fn(DT_N_S_buttons_S_button_0) fn(DT_N_S_buttons_S_button_1) fn(DT_N_S_gpio_wake_up) fn(DT_N_S_gpio_switch_0)
#define DT_FOREACH_OKAY_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_flash_controller_50030000) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000) fn(DT_N_S_soc_S_usart_5005c000) fn(DT_N_S_soc_S_semailbox_5c021000) fn(DT_N_S_soc_S_gpio_5003c000) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0) fn(DT_N_S_soc_S_wdog_5b004000) fn(DT_N_S_clocks) fn(DT_N_S_clocks_S_clk_hfxo) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_power_states) fn(DT_N_S_cpus_S_power_states_S_em1) fn(DT_N_S_cpus_S_power_states_S_em2) fn(DT_N_S_cpus_S_power_states_S_em3) fn(DT_N_S_memory_20000000) fn(DT_N_S_pin_controller) fn(DT_N_S_pin_controller_S_usart0_default) fn(DT_N_S_pin_controller_S_usart0_default_S_group1) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_leds_S_led_1) fn(DT_N_S_buttons) fn(DT_N_S_buttons_S_button_0) fn(DT_N_S_buttons_S_button_1) fn(DT_N_S_gpio_wake_up) fn(DT_N_S_gpio_switch_0)
#define DT_FOREACH_VARGS_HELPER(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__) fn(DT_N_S_soc_S_leuart_4006a000, __VA_ARGS__) fn(DT_N_S_soc_S_usart_5005c000, __VA_ARGS__) fn(DT_N_S_soc_S_burtc_50064000, __VA_ARGS__) fn(DT_N_S_soc_S_semailbox_5c021000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_5b000000, __VA_ARGS__) fn(DT_N_S_soc_S_stimer_500a8000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0, __VA_ARGS__) fn(DT_N_S_soc_S_wdog_5b004000, __VA_ARGS__) fn(DT_N_S_soc_S_wdog_5b008000, __VA_ARGS__) fn(DT_N_S_soc_S_adc_59004000, __VA_ARGS__) fn(DT_N_S_clocks, __VA_ARGS__) fn(DT_N_S_clocks_S_clk_hfxo, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_em1, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_em2, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_em3, __VA_ARGS__) fn(DT_N_S_memory_20000000, __VA_ARGS__) fn(DT_N_S_bt_hci_silabs, __VA_ARGS__) fn(DT_N_S_pin_controller, __VA_ARGS__) fn(DT_N_S_pin_controller_S_usart0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_usart0_default_S_group1, __VA_ARGS__) fn(DT_N_S_hwinfo, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_leds_S_led_0, __VA_ARGS__) fn(DT_N_S_leds_S_led_1, __VA_ARGS__) fn(DT_N_S_buttons, __VA_ARGS__) fn(DT_N_S_buttons_S_button_0, __VA_ARGS__) fn(DT_N_S_buttons_S_button_1, __VA_ARGS__) fn(DT_N_S_gpio_wake_up, __VA_ARGS__) fn(DT_N_S_gpio_switch_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_VARGS_HELPER(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000, __VA_ARGS__) fn(DT_N_S_soc_S_usart_5005c000, __VA_ARGS__) fn(DT_N_S_soc_S_semailbox_5c021000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0, __VA_ARGS__) fn(DT_N_S_soc_S_wdog_5b004000, __VA_ARGS__) fn(DT_N_S_clocks, __VA_ARGS__) fn(DT_N_S_clocks_S_clk_hfxo, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_em1, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_em2, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_em3, __VA_ARGS__) fn(DT_N_S_memory_20000000, __VA_ARGS__) fn(DT_N_S_pin_controller, __VA_ARGS__) fn(DT_N_S_pin_controller_S_usart0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_usart0_default_S_group1, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_leds_S_led_0, __VA_ARGS__) fn(DT_N_S_leds_S_led_1, __VA_ARGS__) fn(DT_N_S_buttons, __VA_ARGS__) fn(DT_N_S_buttons_S_button_0, __VA_ARGS__) fn(DT_N_S_buttons_S_button_1, __VA_ARGS__) fn(DT_N_S_gpio_wake_up, __VA_ARGS__) fn(DT_N_S_gpio_switch_0, __VA_ARGS__)
#define DT_COMPAT_fixed_partitions_LABEL_mcuboot DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_0
#define DT_COMPAT_fixed_partitions_LABEL_mcuboot_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_0 DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_c000
#define DT_COMPAT_fixed_partitions_LABEL_image_0_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_1 DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_80000
#define DT_COMPAT_fixed_partitions_LABEL_image_1_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_scratch DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_f4000
#define DT_COMPAT_fixed_partitions_LABEL_image_scratch_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_storage DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions_S_partition_fc000
#define DT_COMPAT_fixed_partitions_LABEL_storage_EXISTS 1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_silabs_autecradio 1
#define DT_COMPAT_HAS_OKAY_silabs_efr32zg23 1
#define DT_COMPAT_HAS_OKAY_silabs_efr32fz23b020f512gm48 1
#define DT_COMPAT_HAS_OKAY_silabs_efr32 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_arm_v8m_nvic 1
#define DT_COMPAT_HAS_OKAY_arm_armv8m_systick 1
#define DT_COMPAT_HAS_OKAY_silabs_gecko_flash_controller 1
#define DT_COMPAT_HAS_OKAY_soc_nv_flash 1
#define DT_COMPAT_HAS_OKAY_fixed_partitions 1
#define DT_COMPAT_HAS_OKAY_silabs_gecko_usart 1
#define DT_COMPAT_HAS_OKAY_silabs_gecko_semailbox 1
#define DT_COMPAT_HAS_OKAY_silabs_gecko_gpio 1
#define DT_COMPAT_HAS_OKAY_silabs_gecko_gpio_port 1
#define DT_COMPAT_HAS_OKAY_silabs_gecko_wdog 1
#define DT_COMPAT_HAS_OKAY_silabs_hfxo 1
#define DT_COMPAT_HAS_OKAY_arm_cortex_m33 1
#define DT_COMPAT_HAS_OKAY_zephyr_power_state 1
#define DT_COMPAT_HAS_OKAY_mmio_sram 1
#define DT_COMPAT_HAS_OKAY_silabs_gecko_pinctrl 1
#define DT_COMPAT_HAS_OKAY_gpio_leds 1
#define DT_COMPAT_HAS_OKAY_gpio_keys 1
#define DT_COMPAT_HAS_OKAY_silabs_gecko_wake_up_trigger 1
#define DT_COMPAT_HAS_OKAY_regulator_fixed 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_silabs_autecradio_NUM_OKAY 1
#define DT_N_INST_silabs_efr32zg23_NUM_OKAY 2
#define DT_N_INST_silabs_efr32fz23b020f512gm48_NUM_OKAY 1
#define DT_N_INST_silabs_efr32_NUM_OKAY 1
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_arm_v8m_nvic_NUM_OKAY 1
#define DT_N_INST_arm_armv8m_systick_NUM_OKAY 1
#define DT_N_INST_silabs_gecko_flash_controller_NUM_OKAY 1
#define DT_N_INST_soc_nv_flash_NUM_OKAY 1
#define DT_N_INST_fixed_partitions_NUM_OKAY 1
#define DT_N_INST_silabs_gecko_usart_NUM_OKAY 1
#define DT_N_INST_silabs_gecko_semailbox_NUM_OKAY 1
#define DT_N_INST_silabs_gecko_gpio_NUM_OKAY 1
#define DT_N_INST_silabs_gecko_gpio_port_NUM_OKAY 4
#define DT_N_INST_silabs_gecko_wdog_NUM_OKAY 1
#define DT_N_INST_silabs_hfxo_NUM_OKAY 1
#define DT_N_INST_arm_cortex_m33_NUM_OKAY 1
#define DT_N_INST_zephyr_power_state_NUM_OKAY 3
#define DT_N_INST_mmio_sram_NUM_OKAY 1
#define DT_N_INST_silabs_gecko_pinctrl_NUM_OKAY 1
#define DT_N_INST_gpio_leds_NUM_OKAY 1
#define DT_N_INST_gpio_keys_NUM_OKAY 1
#define DT_N_INST_silabs_gecko_wake_up_trigger_NUM_OKAY 1
#define DT_N_INST_regulator_fixed_NUM_OKAY 1
#define DT_FOREACH_OKAY_silabs_autecradio(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_silabs_autecradio(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_silabs_autecradio(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_silabs_autecradio(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_silabs_efr32zg23(fn) fn(DT_N) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_silabs_efr32zg23(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_silabs_efr32zg23(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_silabs_efr32zg23(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_silabs_efr32fz23b020f512gm48(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_silabs_efr32fz23b020f512gm48(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_silabs_efr32fz23b020f512gm48(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_silabs_efr32fz23b020f512gm48(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_silabs_efr32(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_silabs_efr32(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_silabs_efr32(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_silabs_efr32(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_v8m_nvic(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100)
#define DT_FOREACH_OKAY_VARGS_arm_v8m_nvic(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_v8m_nvic(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_v8m_nvic(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_armv8m_systick(fn) fn(DT_N_S_soc_S_timer_e000e010)
#define DT_FOREACH_OKAY_VARGS_arm_armv8m_systick(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_armv8m_systick(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_armv8m_systick(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_silabs_gecko_flash_controller(fn) fn(DT_N_S_soc_S_flash_controller_50030000)
#define DT_FOREACH_OKAY_VARGS_silabs_gecko_flash_controller(fn, ...) fn(DT_N_S_soc_S_flash_controller_50030000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_silabs_gecko_flash_controller(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_silabs_gecko_flash_controller(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_soc_nv_flash(fn) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0)
#define DT_FOREACH_OKAY_VARGS_soc_nv_flash(fn, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_soc_nv_flash(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_soc_nv_flash(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_fixed_partitions(fn) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions)
#define DT_FOREACH_OKAY_VARGS_fixed_partitions(fn, ...) fn(DT_N_S_soc_S_flash_controller_50030000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fixed_partitions(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_fixed_partitions(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_silabs_gecko_usart(fn) fn(DT_N_S_soc_S_usart_5005c000)
#define DT_FOREACH_OKAY_VARGS_silabs_gecko_usart(fn, ...) fn(DT_N_S_soc_S_usart_5005c000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_silabs_gecko_usart(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_silabs_gecko_usart(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_silabs_gecko_semailbox(fn) fn(DT_N_S_soc_S_semailbox_5c021000)
#define DT_FOREACH_OKAY_VARGS_silabs_gecko_semailbox(fn, ...) fn(DT_N_S_soc_S_semailbox_5c021000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_silabs_gecko_semailbox(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_silabs_gecko_semailbox(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_silabs_gecko_gpio(fn) fn(DT_N_S_soc_S_gpio_5003c000)
#define DT_FOREACH_OKAY_VARGS_silabs_gecko_gpio(fn, ...) fn(DT_N_S_soc_S_gpio_5003c000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_silabs_gecko_gpio(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_silabs_gecko_gpio(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_silabs_gecko_gpio_port(fn) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0)
#define DT_FOREACH_OKAY_VARGS_silabs_gecko_gpio_port(fn, ...) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c030, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c060, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c090, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_5003c000_S_gpio_5003c0c0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_silabs_gecko_gpio_port(fn) fn(0) fn(1) fn(2) fn(3)
#define DT_FOREACH_OKAY_INST_VARGS_silabs_gecko_gpio_port(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__) fn(3, __VA_ARGS__)
#define DT_FOREACH_OKAY_silabs_gecko_wdog(fn) fn(DT_N_S_soc_S_wdog_5b004000)
#define DT_FOREACH_OKAY_VARGS_silabs_gecko_wdog(fn, ...) fn(DT_N_S_soc_S_wdog_5b004000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_silabs_gecko_wdog(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_silabs_gecko_wdog(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_silabs_hfxo(fn) fn(DT_N_S_clocks_S_clk_hfxo)
#define DT_FOREACH_OKAY_VARGS_silabs_hfxo(fn, ...) fn(DT_N_S_clocks_S_clk_hfxo, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_silabs_hfxo(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_silabs_hfxo(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_cortex_m33(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_arm_cortex_m33(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_cortex_m33(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_cortex_m33(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_power_state(fn) fn(DT_N_S_cpus_S_power_states_S_em1) fn(DT_N_S_cpus_S_power_states_S_em2) fn(DT_N_S_cpus_S_power_states_S_em3)
#define DT_FOREACH_OKAY_VARGS_zephyr_power_state(fn, ...) fn(DT_N_S_cpus_S_power_states_S_em1, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_em2, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_em3, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_power_state(fn) fn(0) fn(1) fn(2)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_power_state(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__)
#define DT_FOREACH_OKAY_mmio_sram(fn) fn(DT_N_S_memory_20000000)
#define DT_FOREACH_OKAY_VARGS_mmio_sram(fn, ...) fn(DT_N_S_memory_20000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_mmio_sram(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_mmio_sram(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_silabs_gecko_pinctrl(fn) fn(DT_N_S_pin_controller)
#define DT_FOREACH_OKAY_VARGS_silabs_gecko_pinctrl(fn, ...) fn(DT_N_S_pin_controller, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_silabs_gecko_pinctrl(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_silabs_gecko_pinctrl(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_leds(fn) fn(DT_N_S_leds)
#define DT_FOREACH_OKAY_VARGS_gpio_leds(fn, ...) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_leds(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_leds(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_keys(fn) fn(DT_N_S_buttons)
#define DT_FOREACH_OKAY_VARGS_gpio_keys(fn, ...) fn(DT_N_S_buttons, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_keys(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_keys(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_silabs_gecko_wake_up_trigger(fn) fn(DT_N_S_gpio_wake_up)
#define DT_FOREACH_OKAY_VARGS_silabs_gecko_wake_up_trigger(fn, ...) fn(DT_N_S_gpio_wake_up, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_silabs_gecko_wake_up_trigger(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_silabs_gecko_wake_up_trigger(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_regulator_fixed(fn) fn(DT_N_S_gpio_switch_0)
#define DT_FOREACH_OKAY_VARGS_regulator_fixed(fn, ...) fn(DT_N_S_gpio_switch_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_regulator_fixed(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_regulator_fixed(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
